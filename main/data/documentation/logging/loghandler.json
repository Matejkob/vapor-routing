{"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"LogHandler"},{"text":" is an implementation of a logging backend.","type":"text"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LogHandler"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"_SwiftLogSendableLogHandler"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"text":"This type is an implementation detail and should not normally be used, unless implementing your own logging backend.","type":"text"},{"text":" ","type":"text"},{"text":"To use the SwiftLog API, please refer to the documentation of ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":".","type":"text"}]},{"text":"Implementation requirements","type":"heading","level":1,"anchor":"Implementation-requirements"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To implement your own "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" you should respect a few requirements that are necessary so applications work"},{"type":"text","text":" "},{"type":"text","text":"as expected regardless of the selected "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" implementation."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" must be a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The metadata and ","type":"text"},{"code":"logLevel","type":"codeVoice"},{"text":" properties must be implemented so that setting them on a ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" does not affect","type":"text"},{"text":" ","type":"text"},{"text":"other ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":"s.","type":"text"}]}]}]},{"text":"Treat log level & metadata as values","type":"heading","level":3,"anchor":"Treat-log-level--metadata-as-values"},{"type":"paragraph","inlineContent":[{"text":"When developing your ","type":"text"},{"type":"codeVoice","code":"LogHandler"},{"text":", please make sure the following test works.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["LoggingSystem.bootstrap(MyLogHandler.init) \/\/ your LogHandler might have a different bootstrapping step","var logger1 = Logger(label: \"first logger\")","logger1.logLevel = .debug","logger1[metadataKey: \"only-on\"] = \"first\"","","var logger2 = logger1","logger2.logLevel = .error                  \/\/ this must not override `logger1`'s log level","logger2[metadataKey: \"only-on\"] = \"second\" \/\/ this must not override `logger1`'s metadata","","XCTAssertEqual(.debug, logger1.logLevel)","XCTAssertEqual(.error, logger2.logLevel)","XCTAssertEqual(\"first\", logger1[metadataKey: \"only-on\"])","XCTAssertEqual(\"second\", logger2[metadataKey: \"only-on\"])"]},{"text":"Special cases","type":"heading","level":3,"anchor":"Special-cases"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In certain special cases, the log level behaving like a value on "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" might not be what you want. For example,"},{"type":"text","text":" "},{"type":"text","text":"you might want to set the log level across "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":"s to "},{"type":"codeVoice","code":".debug"},{"type":"text","text":" when say a signal (eg. "},{"type":"codeVoice","code":"SIGUSR1"},{"type":"text","text":") is received"},{"type":"text","text":" "},{"type":"text","text":"to be able to debug special failures in production. This special case is acceptable but we urge you to create a"},{"type":"text","text":" "},{"type":"text","text":"solution specific to your "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" implementation to achieve that. Please find an example implementation of this"},{"type":"text","text":" "},{"type":"text","text":"behavior below, on reception of the signal you would call"},{"type":"text","text":" "},{"type":"codeVoice","code":"LogHandlerWithGlobalLogLevelOverride.overrideGlobalLogLevel = .debug"},{"type":"text","text":", for example."}]},{"syntax":"swift","type":"codeListing","code":["import class Foundation.NSLock","","public struct LogHandlerWithGlobalLogLevelOverride: LogHandler {","    \/\/ the static properties hold the globally overridden log level (if overridden)","    private static let overrideLock = NSLock()","    private static var overrideLogLevel: Logger.Level? = nil","","    \/\/ this holds the log level if not overridden","    private var _logLevel: Logger.Level = .info","","    \/\/ metadata storage","    public var metadata: Logger.Metadata = [:]","","    public init(label: String) {","        \/\/ [...]","    }","","    public var logLevel: Logger.Level {","        \/\/ when we get asked for the log level, we check if it was globally overridden or not","        get {","            LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","            defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","            return LogHandlerWithGlobalLogLevelOverride.overrideLogLevel ?? self._logLevel","        }","        \/\/ we set the log level whenever we're asked (note: this might not have an effect if globally","        \/\/ overridden)","        set {","            self._logLevel = newValue","        }","    }","","    public func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?,","                    source: String, file: String, function: String, line: UInt) {","        \/\/ [...]","    }","","    public subscript(metadataKey metadataKey: String) -> Logger.Metadata.Value? {","        get {","            return self.metadata[metadataKey]","        }","        set(newValue) {","            self.metadata[metadataKey] = newValue","        }","    }","","    \/\/ this is the function to globally override the log level, it is not part of the `LogHandler` protocol","    public static func overrideGlobalLogLevel(_ logLevel: Logger.Level) {","        LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","        defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","        LogHandlerWithGlobalLogLevelOverride.overrideLogLevel = logLevel","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Please note that the above "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" will still pass the ‘log level is a value’ test above it iff the global log"},{"type":"text","text":" "},{"type":"text","text":"level has not been overridden. And most importantly it passes the requirement listed above: A change to the log"},{"type":"text","text":" "},{"type":"text","text":"level on one "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" should not affect the log level of another "},{"type":"codeVoice","code":"Logger"},{"type":"text","text":" variable."}]}],"kind":"content"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)"],"title":"Subscripts"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging"]]},"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler"],"kind":"relationships","type":"conformingTypes","title":"Conforming Types"}],"metadata":{"symbolKind":"protocol","role":"symbol","externalID":"s:7Logging10LogHandlerP","navigatorTitle":[{"kind":"identifier","text":"LogHandler"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LogHandler"}],"modules":[{"name":"Logging"}],"roleHeading":"Protocol","title":"LogHandler"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/logging\/loghandler"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/ConsoleKit/ConsoleLogger":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","kind":"symbol","abstract":[{"text":"Outputs logs to a ","type":"text"},{"code":"Console","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"ConsoleLogger","kind":"identifier"}],"url":"\/documentation\/consolekit\/consolelogger","type":"topic","role":"symbol","title":"ConsoleLogger","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConsoleLogger","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Logging":{"abstract":[],"url":"\/documentation\/logging","title":"Logging","role":"collection","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/SwiftLogNoOpLogHandler":{"url":"\/documentation\/logging\/swiftlognooploghandler","title":"SwiftLogNoOpLogHandler","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwiftLogNoOpLogHandler"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SwiftLogNoOpLogHandler"}],"role":"symbol","abstract":[{"type":"text","text":"No operation LogHandler, used when no logging is required"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:file:function:line:)-89rya":{"role":"symbol","abstract":[{"type":"text","text":"SwiftLog 1.0 compatibility method. Please do "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" implement, implement"},{"type":"text","text":" "},{"type":"codeVoice","code":"log(level:message:metadata:source:file:function:line:)"},{"type":"text","text":" instead."}],"kind":"symbol","title":"log(level:message:metadata:file:function:line:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"log"},{"kind":"text","text":"("},{"kind":"externalParam","text":"level"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Logger","preciseIdentifier":"s:7Logging6LoggerV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO"},{"kind":"text","text":", "},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV7MessageV","text":"Message","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"metadata","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV8Metadataa","text":"Metadata","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"function","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":")"}],"url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","defaultImplementations":1,"required":true},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:source:file:function:line:)-8kgt7":{"title":"log(level:message:metadata:source:file:function:line:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","type":"topic","kind":"symbol","url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"log","kind":"identifier"},{"text":"(","kind":"text"},{"text":"level","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Logging6LoggerV7MessageV","kind":"typeIdentifier","text":"Message"},{"kind":"text","text":", "},{"kind":"externalParam","text":"metadata"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier","text":"Logger"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier","text":"Metadata"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"source"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":")"}],"defaultImplementations":1,"abstract":[{"text":"This method is called when a ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" must emit a log message. There is no need for the ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"text":"check if the ","type":"text"},{"code":"level","type":"codeVoice"},{"text":" is above or below the configured ","type":"text"},{"code":"logLevel","type":"codeVoice"},{"text":" as ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" already performed this check and","type":"text"},{"text":" ","type":"text"},{"text":"determined that a message should be logged.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler":{"title":"LogHandler","kind":"symbol","navigatorTitle":[{"text":"LogHandler","kind":"identifier"}],"role":"symbol","url":"\/documentation\/logging\/loghandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}],"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" is an implementation of a logging backend."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Logging/StreamLogHandler":{"type":"topic","url":"\/documentation\/logging\/streamloghandler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StreamLogHandler"}],"title":"StreamLogHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"StreamLogHandler"}],"abstract":[{"code":"StreamLogHandler","type":"codeVoice"},{"type":"text","text":" is a simple implementation of "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" for directing"},{"type":"text","text":" "},{"code":"Logger","type":"codeVoice"},{"type":"text","text":" output to either "},{"code":"stderr","type":"codeVoice"},{"type":"text","text":" or "},{"code":"stdout","type":"codeVoice"},{"type":"text","text":" via the factory methods."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/MultiplexLogHandler":{"url":"\/documentation\/logging\/multiplexloghandler","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","title":"MultiplexLogHandler","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MultiplexLogHandler"}],"navigatorTitle":[{"kind":"identifier","text":"MultiplexLogHandler"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A pseudo-"},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" that can be used to send messages to multiple other "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":"s."}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/subscript(metadataKey:)":{"fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"externalParam","text":"metadataKey"},{"kind":"text","text":" _: "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV","text":"Logger"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","text":"Metadata"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:SD5Valuea","text":"Value"},{"kind":"text","text":"?"}],"title":"subscript(metadataKey:)","type":"topic","abstract":[{"type":"text","text":"Add, remove, or change the logging metadata."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)","kind":"symbol","required":true,"url":"\/documentation\/logging\/loghandler\/subscript(metadatakey:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/metadata":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"metadata","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata","abstract":[{"type":"text","text":"Get or set the entire metadata storage as a dictionary."}],"title":"metadata","url":"\/documentation\/logging\/loghandler\/metadata","kind":"symbol","type":"topic","required":true},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/logLevel":{"abstract":[{"type":"text","text":"Get or set the configured log level."}],"title":"logLevel","url":"\/documentation\/logging\/loghandler\/loglevel","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","required":true,"type":"topic","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"logLevel","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Logger","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV"},{"text":".","kind":"text"},{"text":"Level","kind":"typeIdentifier","preciseIdentifier":"s:7Logging6LoggerV5LevelO"}]}}}