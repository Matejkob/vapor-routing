{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didreceivebodypart(task:_:)"]}],"metadata":{"title":"didReceiveBodyPart(task:_:)","role":"symbol","modules":[{"name":"AsyncHTTPClient"}],"externalID":"s:15AsyncHTTPClient0B15CopyingDelegateC18didReceiveBodyPart4task_7NIOCore15EventLoopFutureCyytGAA0B0C4TaskCy_ytG_AF10ByteBufferVtF","symbolKind":"method","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"didReceiveBodyPart"},{"kind":"text","text":"("},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"preciseIdentifier":"s:15AsyncHTTPClient0B0C","kind":"typeIdentifier","text":"HTTPClient"},{"kind":"text","text":"."},{"preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","kind":"typeIdentifier","text":"Task"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">, "},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">"}]},"kind":"symbol","abstract":[{"text":"Called when part of a response body is received. Could be called zero or more times.","type":"text"},{"text":" ","type":"text"},{"text":"You must return an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture<Void>"},{"text":" that you complete when you have finished processing the body part.","type":"text"},{"text":" ","type":"text"},{"text":"You can create an already succeeded future by calling ","type":"text"},{"type":"codeVoice","code":"task.eventLoop.makeSucceededFuture(())"},{"text":".","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"didReceiveBodyPart"},{"kind":"text","text":"("},{"kind":"externalParam","text":"task"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"HTTPClient","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Task","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient\/Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBuffer","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}]}]},{"kind":"parameters","parameters":[{"name":"task","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Current request context."}]}]},{"name":"buffer","content":[{"type":"paragraph","inlineContent":[{"text":"Received body ","type":"text"},{"code":"Part","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" that will be used for backpressure."}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"inlineContent":[{"text":"This function will not be called until the future returned by ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveHead(task:_:)-9r4xd","isActive":true,"type":"reference"},{"text":" has completed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function will not be called for subsequent body parts until the previous future returned by a"},{"type":"text","text":" "},{"type":"text","text":"call to this function completes."}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate\/didReceiveBodyPart(task:_:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClient":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPClient","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient","role":"symbol","title":"HTTPClient","url":"\/documentation\/asynchttpclient\/httpclient","type":"topic","abstract":[{"text":"HTTPClient class provides API for request execution.","type":"text"}],"navigatorTitle":[{"text":"HTTPClient","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient","role":"collection","title":"AsyncHTTPClient","url":"\/documentation\/asynchttpclient","type":"topic","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientCopyingDelegate":{"abstract":[{"text":"An ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate"},{"text":" that wraps a callback.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPClientCopyingDelegate","kind":"identifier"}],"role":"symbol","title":"HTTPClientCopyingDelegate","navigatorTitle":[{"text":"HTTPClientCopyingDelegate","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate":{"abstract":[{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate"},{"text":" allows an implementation to receive notifications about request processing and to control how response parts are processed.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"role":"symbol","title":"HTTPClientResponseDelegate","navigatorTitle":[{"text":"HTTPClientResponseDelegate","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClient/Task":{"abstract":[{"text":"Response execution context.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Task","kind":"identifier"}],"role":"symbol","title":"HTTPClient.Task","navigatorTitle":[{"text":"Task","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/asynchttpclient\/httpclient\/task","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClient\/Task"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientResponseDelegate/didReceiveHead(task:_:)-9r4xd":{"abstract":[{"text":"Called when response head is received. Will be called once.","type":"text"},{"text":" ","type":"text"},{"text":"You must return an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture<Void>"},{"text":" that you complete when you have finished processing the body part.","type":"text"},{"text":" ","type":"text"},{"text":"You can create an already succeeded future by calling ","type":"text"},{"type":"codeVoice","code":"task.eventLoop.makeSucceededFuture(())"},{"text":".","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didReceiveHead","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:15AsyncHTTPClient0B0C","text":"HTTPClient","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","text":"Task","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Response"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOHTTP116HTTPResponseHeadV","text":"HTTPResponseHead"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"role":"symbol","title":"didReceiveHead(task:_:)","required":true,"kind":"symbol","type":"topic","defaultImplementations":1,"url":"\/documentation\/asynchttpclient\/httpclientresponsedelegate\/didreceivehead(task:_:)-9r4xd","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientResponseDelegate\/didReceiveHead(task:_:)-9r4xd"},"doc://co.pointfree.VaporRouting/documentation/AsyncHTTPClient/HTTPClientCopyingDelegate/didReceiveBodyPart(task:_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"didReceiveBodyPart","kind":"identifier"},{"text":"(","kind":"text"},{"text":"task","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"HTTPClient","preciseIdentifier":"s:15AsyncHTTPClient0B0C","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Task","preciseIdentifier":"s:15AsyncHTTPClient0B0C4TaskC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"didReceiveBodyPart(task:_:)","kind":"symbol","url":"\/documentation\/asynchttpclient\/httpclientcopyingdelegate\/didreceivebodypart(task:_:)","abstract":[{"text":"Called when part of a response body is received. Could be called zero or more times.","type":"text"},{"text":" ","type":"text"},{"text":"You must return an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture<Void>"},{"text":" that you complete when you have finished processing the body part.","type":"text"},{"text":" ","type":"text"},{"text":"You can create an already succeeded future by calling ","type":"text"},{"type":"codeVoice","code":"task.eventLoop.makeSucceededFuture(())"},{"text":".","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncHTTPClient\/HTTPClientCopyingDelegate\/didReceiveBodyPart(task:_:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}]}}}