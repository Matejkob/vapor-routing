{"kind":"symbol","relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"End"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sl","text":"Collection"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"Useful as a final parser in a long sequence of parsers to guarantee that all input has been","type":"text"},{"text":" ","type":"text"},{"text":"consumed, especially as ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","isActive":true,"type":"reference"},{"text":"’s terminal parser.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This parser will fail if there are input elements that have not been consumed:","type":"text"}],"type":"paragraph"},{"code":["input = \"Hello, Blob!!\"","try parser.parse(&input)","\/\/ error: unexpected input","\/\/  --> input:1:13","\/\/ 1 | Hello, Blob!!","\/\/   |             ^ expected end of input"],"type":"codeListing","syntax":"swift"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"This parser is automatically inserted when you invoke the non-incremental"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq","isActive":true},{"type":"text","text":" methods."}],"type":"paragraph"}],"type":"aside","style":"note"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-2egll","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-7gmzt","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-8lvil"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/parse(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/print(_:into:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/ParserPrinter-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End"},"metadata":{"symbolKind":"struct","roleHeading":"Structure","externalID":"s:7Parsing3EndV","title":"End","role":"symbol","navigatorTitle":[{"text":"End","kind":"identifier"}],"modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/end"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Many":{"abstract":[{"type":"text","text":"A parser that attempts to run another parser as many times as specified, accumulating the result"},{"type":"text","text":" "},{"type":"text","text":"of the outputs."}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Many"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Many","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Many"}],"url":"\/documentation\/parsing\/many","type":"topic","title":"Many"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-76tcw":{"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-76tcw","required":true,"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"role":"symbol","defaultImplementations":3,"title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/ParserPrinter-Implementations":{"role":"collectionGroup","kind":"article","url":"\/documentation\/parsing\/end\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/ParserPrinter-Implementations","title":"ParserPrinter Implementations","abstract":[],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/print(_:into:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"print"},{"kind":"text","text":"((), "},{"kind":"externalParam","text":"into"},{"kind":"text","text":": "},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"url":"\/documentation\/parsing\/end\/print(_:into:)","title":"print(_:into:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Attempts to print a well-structured piece of data into something more nebulous."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/print(_:into:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End":{"url":"\/documentation\/parsing\/end","abstract":[{"type":"text","text":"A parser that succeeds if the input is empty, and fails otherwise."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"End"}],"navigatorTitle":[{"kind":"identifier","text":"End"}],"kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End","title":"End"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-7gmzt":{"url":"\/documentation\/parsing\/end\/init()-7gmzt","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"title":"init()","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-7gmzt","role":"symbol","type":"topic","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-2wzcq":{"abstract":[{"text":"Parse a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" into an output using a UTF-8 parser. This method is more ergnomic to use","type":"text"},{"text":" ","type":"text"},{"text":"than ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","type":"reference","isActive":true},{"text":" because it accepts a plain string rather than a collection of","type":"text"},{"text":" ","type":"text"},{"text":"UTF-8 code units, and the input does not need to be ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-2wzcq","title":"parse(_:)","kind":"symbol","type":"topic","role":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-2wzcq","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/parse(_:)":{"kind":"symbol","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/parse(_:)","title":"parse(_:)","url":"\/documentation\/parsing\/end\/parse(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"title":"ParserPrinter","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","abstract":[{"type":"text","text":"A "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"url":"\/documentation\/parsing\/parserprinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"title":"Parsing","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-6h1d0":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","url":"\/documentation\/parsing\/parser\/parse(_:)-6h1d0","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"abstract":[{"text":"Parse a collection into an output using a parser that works on the collection’s ","type":"text"},{"code":"SubSequence","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This method is more ergnomic to use than ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"},{"text":" because it accepts a","type":"text"},{"text":" ","type":"text"},{"text":"collection directly rather than its subsequence, and the input does not need to be ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","title":"parse(_:)","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/Parser-Implementations":{"type":"topic","title":"Parser Implementations","url":"\/documentation\/parsing\/end\/parser-implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/Parser-Implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-2egll":{"url":"\/documentation\/parsing\/end\/init()-2egll","kind":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Substring.UTF8View"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-2egll","title":"init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/End/init()-8lvil":{"kind":"symbol","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/End\/init()-8lvil","title":"init()","url":"\/documentation\/parsing\/end\/init()-8lvil","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Substring","type":"codeVoice"},{"text":".","type":"text"}]}}}}