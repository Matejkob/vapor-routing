{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection"},"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/prependablecollection"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"navigatorTitle":[{"kind":"identifier","text":"PrependableCollection"}],"role":"symbol","modules":[{"name":"Parsing"}],"symbolKind":"protocol","roleHeading":"Protocol","title":"PrependableCollection","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"}],"externalID":"s:7Parsing21PrependableCollectionP"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/init(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)"]}],"relationshipsSections":[{"type":"inheritsFrom","kind":"relationships","title":"Inherits From","identifiers":["doc:\/\/co.pointfree.VaporRouting\/Sl","doc:\/\/co.pointfree.VaporRouting\/ST"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrependableCollection","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"_EmptyInitializable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"PrependableCollection"},{"type":"text","text":" is a specialized subset of "},{"type":"codeVoice","code":"RangeReplaceableCollection"},{"type":"text","text":" that is tuned to"},{"type":"text","text":" "},{"type":"text","text":"incremental printing."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In fact, any "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":" can get a conformance for free:"}],"type":"paragraph"},{"code":["extension MyRangeReplaceableCollection: PrependableCollection {}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because it is also less strict than "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":", it is an appropriate protocol"},{"type":"text","text":" "},{"type":"text","text":"to conform to for types that cannot and should not conform to "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"directly."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, "},{"code":"Substring.UTF8View","type":"codeVoice"},{"type":"text","text":" is a common input for string parsers to parse from, but it"},{"type":"text","text":" "},{"type":"text","text":"does not conform to "},{"code":"RangeReplaceableCollection","type":"codeVoice"},{"type":"text","text":". It does, however, conform to"},{"type":"text","text":" "},{"code":"PrependableCollection","type":"codeVoice"},{"type":"text","text":" by validating and prepending the given UTF-8 bytes to its underlying"},{"type":"text","text":" "},{"type":"text","text":"substring. So in order to write a parser against generic sequences of UTF-8 bytes, you would"},{"type":"text","text":" "},{"type":"text","text":"constrain its input against "},{"code":"PrependableCollection","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"For example the following ","type":"text"},{"code":"Digits","type":"codeVoice"},{"text":" parser is generic over an ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":" of bytes, and its","type":"text"},{"text":" ","type":"text"},{"text":"printer conformance further constraints its input to be prependable.","type":"text"}],"type":"paragraph"},{"code":["struct Digits<Input: Collection>: Parser","where","  Input.Element == UTF8.CodeUnit,  \/\/ Required for working with a collection of bytes (`UInt8`)","  Input.SubSequence == Input       \/\/ Required for the parser to consume from input","{","  func parse(_ input: inout Input) throws -> Int {","    \/\/ Collect all bytes between ASCII \"0\" and \"9\"","    let prefix = input.prefix(while: { $0 >= .init(ascii: \"0\") && $0 <= .init(ascii: \"9\") })","","    \/\/ Attempt to convert to an `Int`","    guard let int = Int(prefix) else {","      struct ParseError: Error {}","      throw ParseError()","    }","","    \/\/ Incrementally consume bytes from input","    input.removeFirst(prefix.count)","","    return int","  }","}","","extension Digits: ParserPrinter where Input: PrependableCollection {","  func print(_ output: Int, into input: inout Input) {","    \/\/ Convert `Int` to string's underlying bytes","    let bytes = String(output).utf8","","    \/\/ Prepend bytes using `PrependableCollection` conformance.","    input.prepend(contentsOf: bytes)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Digits","type":"codeVoice"},{"text":" parser-printer now works on any collection of UTF-8 code units, including","type":"text"},{"text":" ","type":"text"},{"code":"UTF8View","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"ArraySlice<UInt8>","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["var input = \"123\"[...].utf8","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(input) \/\/ \"123\""],"syntax":"swift","type":"codeListing"},{"code":["var input = ArraySlice(\"123\"[...].utf8)","try Digits().parse(&input) \/\/ 123","try Digits().print(123, into: &input)","Substring(decoding: input, as: UTF8.self) \/\/ \"123\""],"syntax":"swift","type":"codeListing"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"abstract":[{"type":"text","text":"A collection that supports empty initialization and the ability to prepend a sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements of elements to itself."}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection","url":"\/documentation\/parsing\/prependablecollection","type":"topic","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"PrependableCollection"}],"title":"PrependableCollection","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PrependableCollection"}],"abstract":[{"text":"A collection that supports empty initialization and the ability to prepend a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"elements of elements to itself.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"title":"Parsing","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection/prepend(contentsOf:)":{"type":"topic","url":"\/documentation\/parsing\/prependablecollection\/prepend(contentsof:)","title":"prepend(contentsOf:)","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(contentsOf:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"prepend","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"contentsOf","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Inserts the elements of a sequence or collection to the beginning of this collection.","type":"text"}],"kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection/prepend(_:)":{"title":"prepend(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/prepend(_:)","url":"\/documentation\/parsing\/prependablecollection\/prepend(_:)","role":"symbol","abstract":[{"type":"text","text":"Adds an element to the beginning of the collection."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"prepend"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/ST":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/ST","type":"unresolvable","title":"Swift.Sequence"},"doc://co.pointfree.VaporRouting/documentation/Parsing/PrependableCollection/init(_:)":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/PrependableCollection\/init(_:)","abstract":[{"type":"text","text":"Creates a new instance of a collection containing the elements of a sequence."}],"fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/prependablecollection\/init(_:)","title":"init(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/Sl":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/Sl","type":"unresolvable","title":"Swift.Collection"}}}