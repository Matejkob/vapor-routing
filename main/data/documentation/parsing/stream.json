{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/stream"]}],"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Parsers"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Parsing6ParserP","text":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sm","text":"RangeReplaceableCollection"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the following parser can parse an integer followed by a newline from a collection"},{"type":"text","text":" "},{"type":"text","text":"of UTF8 bytes:"}]},{"type":"codeListing","syntax":"swift","code":["Parse {","  Int.parser(of: ArraySlice<UInt8>.self)","  StartsWith(\"\\n\".utf8)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This parser can be transformed into one that processes an incoming stream of UTF8 bytes:"}]},{"type":"codeListing","syntax":"swift","code":["Stream {","  Parse {","    Int.parser(of: ArraySlice<UInt8>.self)","    StartsWith(\"\\n\".utf8)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then it can be used on a stream, such as values coming from standard in:"}]},{"type":"codeListing","syntax":"swift","code":["var stdin = AnyIterator {","  readLine().map { ArraySlice($0.utf8) }","}","","try newlineSeparatedIntegers.parse(&stdin)"]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream"},"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"title":"Stream","roleHeading":"Structure","navigatorTitle":[{"text":"Stream","kind":"identifier"}],"role":"symbol","externalID":"s:7Parsing6StreamV","symbolKind":"struct","modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"sections":[],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/init(build:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/Parser-Implementations"],"generated":true}],"abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"relationshipsSections":[{"title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"],"type":"conformsTo","kind":"relationships"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Stream/parsers":{"type":"topic","abstract":[],"url":"\/documentation\/parsing\/stream\/parsers","role":"symbol","title":"parsers","kind":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/parsers"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Stream/init(build:)":{"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"build","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","title":"init(build:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/init(build:)","type":"topic","role":"symbol","url":"\/documentation\/parsing\/stream\/init(build:)","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Stream/parse(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:s11AnyIteratorV","text":"AnyIterator","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> [","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"]","kind":"text"}],"kind":"symbol","title":"parse(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/parse(_:)","type":"topic","role":"symbol","url":"\/documentation\/parsing\/stream\/parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Stream":{"title":"Stream","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Stream"}],"url":"\/documentation\/parsing\/stream","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream","abstract":[{"type":"text","text":"A parser that can parse streams of input."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Stream"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Stream/Parser-Implementations":{"title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Stream\/Parser-Implementations","kind":"article","abstract":[],"url":"\/documentation\/parsing\/stream\/parser-implementations","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"title":"Parsing","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/parsing"}}}