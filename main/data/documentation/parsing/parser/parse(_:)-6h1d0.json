{"sections":[],"metadata":{"extendedModule":"Parsing","title":"parse(_:)","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"modules":[{"name":"Parsing"}],"role":"symbol","roleHeading":"Instance Method","externalID":"s:7Parsing6ParserPAAE5parsey6OutputQzqd__KSlRd__11SubSequenceQyd__5InputRtzlF"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0"},"abstract":[{"text":"Parse a collection into an output using a parser that works on the collection’s ","type":"text"},{"code":"SubSequence","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This method is more ergnomic to use than ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true,"type":"reference"},{"text":" because it accepts a","type":"text"},{"text":" ","type":"text"},{"text":"collection directly rather than its subsequence, and the input does not need to be ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"variants":[{"paths":["\/documentation\/parsing\/parser\/parse(_:)-6h1d0"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"input","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A nebulous collection of data to be parsed."}]}],"name":"input"}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"A more well-structured value parsed from the given input.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"Rather than having to create a mutable subsequence value, such as a "},{"type":"codeVoice","code":"Substring"},{"type":"text","text":", and feed it"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","type":"reference","isActive":true},{"type":"text","text":" method like this:"}],"type":"paragraph"},{"syntax":"swift","code":["var input = \"123,true\"[...]","let output = try Parse {","  Int.parser()","  \",\"","  Bool.parser()","}",".parse(&input) \/\/ (123, true)"],"type":"codeListing"},{"inlineContent":[{"text":"You can just feed a plain ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" input directly:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let output = try Parse {","  Int.parser()","  \",\"","  Bool.parser()","}",".parse(\"123,true\") \/\/ (123, true)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This method will fail if the parser does not consume the entirety of the input."},{"type":"text","text":" "},{"type":"text","text":"For example:"}],"type":"paragraph"},{"syntax":"swift","code":["let output = try Parse {"," Int.parser()"," \",\""," Bool.parser()","}",".parse(\"123,true    \")","","\/\/ error: unexpected input","\/\/  --> input:1:9","\/\/ 1 | 123,true␣␣␣␣","\/\/   |         ^ expected end of input"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If your input can have trailing whitespace that you would like to consume and discard"},{"type":"text","text":" "},{"text":"you can do so like this:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["let output = try Parse {","  Int.parser()","  \",\".utf8","  Bool.parser()","  Whitespace()","}",".parse(\"123,true    \") \/\/ (123, true)"]}],"name":"Tip","style":"tip","type":"aside"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-76tcw":{"type":"topic","kind":"symbol","url":"\/documentation\/parsing\/parser\/parse(_:)-76tcw","required":true,"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"role":"symbol","defaultImplementations":3,"title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-6h1d0":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","url":"\/documentation\/parsing\/parser\/parse(_:)-6h1d0","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"C","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"}],"abstract":[{"text":"Parse a collection into an output using a parser that works on the collection’s ","type":"text"},{"code":"SubSequence","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This method is more ergnomic to use than ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"},{"text":" because it accepts a","type":"text"},{"text":" ","type":"text"},{"text":"collection directly rather than its subsequence, and the input does not need to be ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","title":"parse(_:)","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"title":"Parsing","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/parsing"}}}