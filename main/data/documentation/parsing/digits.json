{"variants":[{"paths":["\/documentation\/parsing\/digits"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","externalID":"s:7Parsing6DigitsV","title":"Digits","navigatorTitle":[{"kind":"identifier","text":"Digits"}],"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Digits"}],"modules":[{"name":"Parsing"}],"roleHeading":"Structure"},"kind":"symbol","relationshipsSections":[{"title":"Conforms To","kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Digits","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Length","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Length","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/CountingRange","preciseIdentifier":"s:7Parsing13CountingRangeP","text":"CountingRange","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","preciseIdentifier":"s:7Parsing10ConversionP","text":"Conversion","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"SubSequence","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"InputToBytes","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:s4UTF8a","text":"UTF8","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","text":"CodeUnit","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Useful for processing simple numbers into integers."}]},{"type":"codeListing","syntax":"swift","code":["try Digits().parse(\"123\")  \/\/ 123"]},{"type":"paragraph","inlineContent":[{"code":"Digits","type":"codeVoice"},{"text":" can be configured with a length of input to parse, making it a more surgical tool than","type":"text"},{"text":" ","type":"text"},{"text":"doc:Int","type":"text"},{"text":" parsers, which will parse an entire number all at once.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you may want to parse a "},{"type":"codeVoice","code":"YYYYMMDD"},{"type":"text","text":" date format. You could do so using "},{"type":"codeVoice","code":"Digits"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct Date { var year, month, day: Int }","","Parse(Date.init(year:month:day:)) {","  Digits(4)","  Digits(2)","  Digits(2)","}",".parse(\"20220131\")  \/\/ Date(year: 2022, month: 1, day: 31)"]}]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"abstract":[{"type":"text","text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code"},{"type":"text","text":" "},{"type":"text","text":"units."}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init()-1vm8z","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init()-77axf","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init()-l9xc","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init(_:)-6bmup","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init(_:)-6dgjs","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init(_:)-7xl97"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/ParserPrinter-Implementations"],"generated":true}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"url":"\/documentation\/parsing\/parserprinter","conformance":{"constraints":[{"code":"Length","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CountingRange","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Conversion","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Input","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"InputToBytes.Input.SubSequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"PrependableCollection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"InputToBytes.Output.SubSequence","type":"codeVoice"},{"type":"text","text":", and "},{"code":"InputToBytes.Output.Element","type":"codeVoice"},{"type":"text","text":" is "},{"code":"UTF8.CodeUnit","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","title":"ParserPrinter","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/init()-1vm8z":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init()-1vm8z","title":"init()","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"code":"CountingRange","type":"codeVoice"},{"type":"text","text":" and "},{"code":"InputToBytes","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Conversions.SubstringToUTF8View","type":"codeVoice"},{"type":"text","text":"."}]},"kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[],"type":"topic","url":"\/documentation\/parsing\/digits\/init()-1vm8z"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/ParserPrinter-Implementations":{"kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/ParserPrinter-Implementations","type":"topic","title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/digits\/parserprinter-implementations","role":"collectionGroup","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/init(_:)-6bmup":{"title":"init(_:)","kind":"symbol","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init(_:)-6bmup","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":")"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Input.SubSequence"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Output"},{"type":"text","text":" is "},{"type":"codeVoice","code":"InputToBytes.Output.SubSequence"},{"type":"text","text":", and "},{"type":"codeVoice","code":"InputToBytes.Output.Element"},{"type":"text","text":" is "},{"type":"codeVoice","code":"UTF8.CodeUnit"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/parsing\/digits\/init(_:)-6bmup","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits":{"kind":"symbol","title":"Digits","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Digits"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits","url":"\/documentation\/parsing\/digits","abstract":[{"type":"text","text":"A parser that consumes a number of digits from the beginning of a collection of UTF-8 code"},{"type":"text","text":" "},{"type":"text","text":"units."}],"navigatorTitle":[{"kind":"identifier","text":"Digits"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/init()-77axf":{"abstract":[],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.Identity<Substring.UTF8View>"},{"type":"text","text":"."}]},"type":"topic","title":"init()","url":"\/documentation\/parsing\/digits\/init()-77axf","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init()-77axf"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"title":"Parsing","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/CountingRange":{"url":"\/documentation\/parsing\/countingrange","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/CountingRange","role":"symbol","navigatorTitle":[{"text":"CountingRange","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CountingRange","kind":"identifier"}],"title":"CountingRange","type":"topic","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/init(_:)-7xl97":{"kind":"symbol","title":"init(_:)","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Length","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"CountingRange","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"InputToBytes","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Conversions.SubstringToUTF8View","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init(_:)-7xl97","url":"\/documentation\/parsing\/digits\/init(_:)-7xl97","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/init()-l9xc":{"abstract":[],"url":"\/documentation\/parsing\/digits\/init()-l9xc","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"C","kind":"genericParameter"},{"text":">()","kind":"text"}],"role":"symbol","type":"topic","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Conversion"},{"type":"text","text":", "},{"type":"codeVoice","code":"InputToBytes.Input"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"InputToBytes.Input.SubSequence","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Output","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"InputToBytes.Output","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"InputToBytes.Output.SubSequence","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"InputToBytes.Output.Element","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"UTF8.CodeUnit","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init()-l9xc","kind":"symbol","title":"init()"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/Parser-Implementations":{"abstract":[],"kind":"article","title":"Parser Implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/Parser-Implementations","role":"collectionGroup","type":"topic","url":"\/documentation\/parsing\/digits\/parser-implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/init(_:)-6dgjs":{"url":"\/documentation\/parsing\/digits\/init(_:)-6dgjs","title":"init(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/init(_:)-6dgjs","type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Length"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"CountingRange"},{"type":"text","text":" and "},{"type":"codeVoice","code":"InputToBytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Conversions.Identity<Substring.UTF8View>"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Length"},{"kind":"text","text":")"}],"kind":"symbol","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversion":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","title":"Conversion","type":"topic","kind":"symbol","url":"\/documentation\/parsing\/conversion","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversion"}],"navigatorTitle":[{"kind":"identifier","text":"Conversion"}],"abstract":[{"type":"text","text":"Declares a type that can transform an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value into an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value "},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"type":"text","text":" transform an"},{"type":"text","text":" "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value back into an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Digits/parse(_:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"InputToBytes"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}],"title":"parse(_:)","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Digits\/parse(_:)","type":"topic","url":"\/documentation\/parsing\/digits\/parse(_:)","kind":"symbol"}}}