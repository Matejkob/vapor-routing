{"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/init(radix:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/radix"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/parse(_:)"]},{"generated":true,"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/ParserPrinter-Implementations"]}],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/parsers\/intparser"]}],"abstract":[{"text":"A parser that consumes an integer (with an optional leading ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"-"},{"text":" sign for signed integer","type":"text"},{"text":" ","type":"text"},{"text":"types) from the beginning of a collection of UTF8 code units.","type":"text"}],"metadata":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IntParser"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"IntParser"}],"externalID":"s:7Parsing7ParsersO9IntParserV","roleHeading":"Structure","title":"Parsers.IntParser","modules":[{"name":"Parsing"}],"symbolKind":"struct","extendedModule":"Parsing"},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IntParser"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:s17FixedWidthIntegerP","kind":"typeIdentifier","text":"FixedWidthInteger"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":" == "},{"preciseIdentifier":"s:s4UTF8a","kind":"typeIdentifier","text":"UTF8"},{"kind":"text","text":"."},{"preciseIdentifier":"s:s7UnicodeO4UTF8O8CodeUnita","kind":"typeIdentifier","text":"CodeUnit"}],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"You will not typically need to interact with this type directly. Instead you will usually use"},{"type":"text","text":" "},{"type":"text","text":"the static "},{"type":"codeVoice","code":"parser()"},{"type":"text","text":" method on the "},{"type":"codeVoice","code":"FixedWidthInteger"},{"type":"text","text":" of your choice, e.g. "},{"type":"codeVoice","code":"Int.parser()"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"UInt8.parser()"},{"type":"text","text":", etc., all of which construct this type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"See "},{"type":"text","text":"doc:Int"},{"type":"text","text":" for more information about this parser."}],"type":"paragraph"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser","interfaceLanguage":"swift"},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers":{"title":"Parsers","type":"topic","navigatorTitle":[{"text":"Parsers","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers","abstract":[{"text":"A namespace for types that serve as parsers.","type":"text"}],"role":"symbol","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"identifier"}],"url":"\/documentation\/parsing\/parsers"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser":{"title":"Parsers.IntParser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IntParser","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser","kind":"symbol","navigatorTitle":[{"text":"IntParser","kind":"identifier"}],"type":"topic","url":"\/documentation\/parsing\/parsers\/intparser","abstract":[{"text":"A parser that consumes an integer (with an optional leading ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"-"},{"text":" sign for signed integer","type":"text"},{"text":" ","type":"text"},{"text":"types) from the beginning of a collection of UTF8 code units.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"title":"Parser","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Parser"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","abstract":[{"type":"text","text":"Declares a type that can incrementally parse an "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" value from an "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parser"}],"url":"\/documentation\/parsing\/parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"title":"ParserPrinter","navigatorTitle":[{"text":"ParserPrinter","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Input","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"PrependableCollection","type":"codeVoice"},{"type":"text","text":", "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" is "},{"code":"Input.SubSequence","type":"codeVoice"},{"type":"text","text":", "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"FixedWidthInteger","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Input.Element","type":"codeVoice"},{"type":"text","text":" is "},{"code":"UTF8.CodeUnit","type":"codeVoice"},{"type":"text","text":"."}]},"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserPrinter","kind":"identifier"}],"url":"\/documentation\/parsing\/parserprinter","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/ParserPrinter-Implementations":{"title":"ParserPrinter Implementations","role":"collectionGroup","type":"topic","abstract":[],"kind":"article","url":"\/documentation\/parsing\/parsers\/intparser\/parserprinter-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/ParserPrinter-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/radix":{"kind":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"radix"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"}],"title":"radix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/radix","type":"topic","url":"\/documentation\/parsing\/parsers\/intparser\/radix","role":"symbol","abstract":[{"text":"The radix, or base, to use for converting text to an integer value.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/Parser-Implementations":{"title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/Parser-Implementations","kind":"article","type":"topic","url":"\/documentation\/parsing\/parsers\/intparser\/parser-implementations","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/init(radix:)":{"title":"init(radix:)","type":"topic","url":"\/documentation\/parsing\/parsers\/intparser\/init(radix:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/init(radix:)","abstract":[],"fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"radix","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"title":"Parsing","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/parsing"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parsers/IntParser/parse(_:)":{"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parsers\/IntParser\/parse(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"}],"title":"parse(_:)","type":"topic","url":"\/documentation\/parsing\/parsers\/intparser\/parse(_:)","kind":"symbol"}}}