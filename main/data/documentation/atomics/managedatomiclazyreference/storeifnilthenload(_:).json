{"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomicLazyReference"]]},"abstract":[{"text":"Atomically initializes this reference if its current value is nil, then","type":"text"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"text":" ","type":"text"},{"text":"then ","type":"text"},{"code":"storeIfNilThenLoad(_:)","type":"codeVoice"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"text":"the current value without updating it.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"desired","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example demonstrates how this can be used to implement a"},{"type":"text","text":" "},{"type":"text","text":"thread-safe lazily initialized reference:"}]},{"code":["class Image {","  var _histogram: UnsafeAtomicLazyReference<Histogram> = ...","","  \/\/ This is safe to call concurrently from multiple threads.","  var atomicLazyHistogram: Histogram {","    if let histogram = _histogram.load() { return foo }","    \/\/ Note that code here may run concurrently on","    \/\/ multiple threads, but only one of them will get to","    \/\/ succeed setting the reference.","    let histogram = ...","    return _histogram.storeIfNilThenLoad(foo)","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operation uses acquiring-and-releasing memory ordering."}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/managedatomiclazyreference\/storeifnilthenload(_:)"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomicLazyReference\/storeIfNilThenLoad(_:)","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Atomics"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"text":"(","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"}],"externalID":"s:7Atomics26ManagedAtomicLazyReferenceC18storeIfNilThenLoadyxxnF","role":"symbol","roleHeading":"Instance Method","extendedModule":"Atomics","title":"storeIfNilThenLoad(_:)","symbolKind":"method"},"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/ManagedAtomicLazyReference/storeIfNilThenLoad(_:)":{"kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"text":" ","type":"text"},{"text":"then ","type":"text"},{"code":"storeIfNilThenLoad(_:)","type":"codeVoice"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"text":"the current value without updating it.","type":"text"}],"url":"\/documentation\/atomics\/managedatomiclazyreference\/storeifnilthenload(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomicLazyReference\/storeIfNilThenLoad(_:)","role":"symbol","title":"storeIfNilThenLoad(_:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/ManagedAtomicLazyReference":{"kind":"symbol","title":"ManagedAtomicLazyReference","navigatorTitle":[{"text":"ManagedAtomicLazyReference","kind":"identifier"}],"url":"\/documentation\/atomics\/managedatomiclazyreference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomicLazyReference","role":"symbol","abstract":[{"type":"text","text":"A reference type holding a lazily initializable atomic"},{"type":"text","text":" "},{"type":"text","text":"strong reference, with automatic memory management."}],"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ManagedAtomicLazyReference","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"abstract":[],"url":"\/documentation\/atomics","title":"Atomics","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"}}}