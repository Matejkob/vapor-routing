{"metadata":{"title":"atomicMemoryFence(ordering:)","symbolKind":"func","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicMemoryFence","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":")"}],"modules":[{"name":"Atomics"}],"roleHeading":"Function","externalID":"s:7Atomics17atomicMemoryFence8orderingyAA20AtomicUpdateOrderingV_tF"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/atomicMemoryFence(ordering:)"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicMemoryFence","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering"},{"text":")","kind":"text"}]}],"kind":"declarations"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"items":[{"content":[{"inlineContent":[{"text":"A relaxed fence has no effect.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An acquiring fence ties to any preceding atomic operation that"},{"type":"text","text":" "},{"type":"text","text":"reads a value, and synchronizes with any releasing operation whose"},{"type":"text","text":" "},{"type":"text","text":"value was read."}]}]},{"content":[{"inlineContent":[{"text":"A releasing fence ties to any subsequent atomic operation that","type":"text"},{"text":" ","type":"text"},{"text":"modifies a value, and synchronizes with any acquiring operation","type":"text"},{"text":" ","type":"text"},{"text":"that reads the result.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An acquiring and releasing fence is a combination of an"},{"type":"text","text":" "},{"type":"text","text":"acquiring and a releasing fence."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A sequentially consistent fence behaves like an acquiring and"},{"type":"text","text":" "},{"type":"text","text":"releasing fence, and ensures that the fence itself is part of"},{"type":"text","text":" "},{"type":"text","text":"the single, total ordering for all sequentially consistent"},{"type":"text","text":" "},{"type":"text","text":"operations."}]}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"text":"This operation corresponds to ","type":"text"},{"code":"std::atomic_thread_fence","type":"codeVoice"},{"text":" in C++.","type":"text"}]}]}],"variants":[{"paths":["\/documentation\/atomics\/atomicmemoryfence(ordering:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"text":"Establishes a memory ordering without associating it with a","type":"text"},{"text":" ","type":"text"},{"text":"particular atomic operation.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics":{"abstract":[],"url":"\/documentation\/atomics","title":"Atomics","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicUpdateOrdering":{"abstract":[{"type":"text","text":"Specifies the memory ordering semantics of an atomic read-modify-write"},{"type":"text","text":" "},{"type":"text","text":"operation."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicUpdateOrdering"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","navigatorTitle":[{"kind":"identifier","text":"AtomicUpdateOrdering"}],"url":"\/documentation\/atomics\/atomicupdateordering","title":"AtomicUpdateOrdering","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Atomics/atomicMemoryFence(ordering:)":{"title":"atomicMemoryFence(ordering:)","url":"\/documentation\/atomics\/atomicmemoryfence(ordering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/atomicMemoryFence(ordering:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicMemoryFence","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","abstract":[{"text":"Establishes a memory ordering without associating it with a","type":"text"},{"text":" ","type":"text"},{"text":"particular atomic operation.","type":"text"}]}}}