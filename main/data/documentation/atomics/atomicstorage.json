{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage"},"variants":[{"paths":["\/documentation\/atomics\/atomicstorage"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/Value"]},{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/init(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/dispose()"]},{"title":"Type Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicExchange(_:at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicLoad(at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicStore(_:at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"]}],"abstract":[{"text":"The storage representation for an atomic value, providing pointer-based","type":"text"},{"text":" ","type":"text"},{"text":"atomic operations. This is a low-level implementation detail of atomic","type":"text"},{"text":" ","type":"text"},{"text":"types; instead of directly handling conforming types, it is usually better","type":"text"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"code":"UnsafeAtomic","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"ManagedAtomic","type":"codeVoice"},{"text":" generics – these provide more","type":"text"},{"text":" ","type":"text"},{"text":"convenient and safer interfaces while also ensuring that the storage is","type":"text"},{"text":" ","type":"text"},{"text":"correctly constructed and destroyed.","type":"text"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicStorage"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"Logically, atomic storage representations are neither value- nor reference"},{"type":"text","text":" "},{"type":"text","text":"types: they should be treated as non-copiable values with a custom"},{"type":"text","text":" "},{"type":"text","text":"destructor. Such constructs cannot currently be modeled directly in Swift,"},{"type":"text","text":" "},{"type":"text","text":"so types conforming to this protocol must be handled carefully to prevent"},{"type":"text","text":" "},{"type":"text","text":"accidental copying. For example, it usually isn’t safe to pass around atomic"},{"type":"text","text":" "},{"type":"text","text":"storage representations as function arguments or return values. Instead,"},{"type":"text","text":" "},{"type":"text","text":"they are usually addressed through unsafe pointers."}],"type":"paragraph"}],"kind":"content"}],"sections":[],"kind":"symbol","metadata":{"role":"symbol","roleHeading":"Protocol","navigatorTitle":[{"kind":"identifier","text":"AtomicStorage"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicStorage"}],"title":"AtomicStorage","externalID":"s:7Atomics13AtomicStorageP","modules":[{"name":"Atomics"}],"symbolKind":"protocol"},"schemaVersion":{"minor":3,"patch":0,"major":0},"relationshipsSections":[{"title":"Inherited By","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicIntegerStorage"],"kind":"relationships","type":"inheritedBy"},{"title":"Conforming Types","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage"],"kind":"relationships","type":"conformingTypes"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage":{"url":"\/documentation\/atomics\/atomicstorage","title":"AtomicStorage","navigatorTitle":[{"text":"AtomicStorage","kind":"identifier"}],"abstract":[{"text":"The storage representation for an atomic value, providing pointer-based","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"atomic operations. This is a low-level implementation detail of atomic"},{"type":"text","text":" "},{"type":"text","text":"types; instead of directly handling conforming types, it is usually better"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"UnsafeAtomic"},{"text":" or ","type":"text"},{"code":"ManagedAtomic","type":"codeVoice"},{"text":" generics – these provide more","type":"text"},{"text":" ","type":"text"},{"text":"convenient and safer interfaces while also ensuring that the storage is","type":"text"},{"text":" ","type":"text"},{"text":"correctly constructed and destroyed.","type":"text"}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicStorage","kind":"identifier"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicIntegerStorage":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicIntegerStorage","kind":"symbol","abstract":[{"type":"text","text":"The storage representation for an atomic integer value, providing"},{"type":"text","text":" "},{"type":"text","text":"pointer-based atomic operations."}],"url":"\/documentation\/atomics\/atomicintegerstorage","navigatorTitle":[{"kind":"identifier","text":"AtomicIntegerStorage"}],"title":"AtomicIntegerStorage","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicIntegerStorage"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicCompareExchange(expected:desired:at:ordering:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:ordering:)","url":"\/documentation\/atomics\/atomicstorage\/atomiccompareexchange(expected:desired:at:ordering:)","role":"symbol","title":"atomicCompareExchange(expected:desired:at:ordering:)","type":"topic","required":true,"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Perform an atomic compare and exchange operation on the value referenced","type":"text"},{"text":" ","type":"text"},{"text":"by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"text":", applying the specified memory ordering.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/init(_:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"type":"topic","abstract":[{"text":"Encode the supplied value into its atomic storage representation.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/init(_:)","title":"init(_:)","url":"\/documentation\/atomics\/atomicstorage\/init(_:)","required":true,"kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/dispose()":{"title":"dispose()","url":"\/documentation\/atomics\/atomicstorage\/dispose()","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/dispose()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dispose"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"required":true,"abstract":[{"type":"text","text":"Prepare this atomic storage value for deinitialization, extracting the"},{"type":"text","text":" "},{"type":"text","text":"logical value it represents. This invalidates this atomic storage; you"},{"type":"text","text":" "},{"type":"text","text":"must not perform any operations on it after this call (except for"},{"type":"text","text":" "},{"type":"text","text":"deinitialization)."}],"kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicStore(_:at:ordering:)":{"role":"symbol","title":"atomicStore(_:at:ordering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicStore(_:at:ordering:)","url":"\/documentation\/atomics\/atomicstorage\/atomicstore(_:at:ordering:)","abstract":[{"text":"Atomically sets the value referenced by ","type":"text"},{"type":"codeVoice","code":"pointer"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"desired"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"applying the specified memory ordering.","type":"text"}],"kind":"symbol","required":true,"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicStore","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","kind":"typeIdentifier","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicStoreOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics19AtomicStoreOrderingV"},{"text":")","kind":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/Value":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/Value","title":"Value","abstract":[{"text":"The type whose values this storage representation is representing.","type":"text"}],"kind":"symbol","url":"\/documentation\/atomics\/atomicstorage\/value","role":"symbol","fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Value"}],"required":true},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"abstract":[],"url":"\/documentation\/atomics","title":"Atomics","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicExchange(_:at:ordering:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicExchange(_:at:ordering:)","title":"atomicExchange(_:at:ordering:)","abstract":[{"text":"Atomically sets the value referenced by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"type":"text","text":" to "},{"code":"desired","type":"codeVoice"},{"type":"text","text":" and returns"},{"type":"text","text":" "},{"type":"text","text":"the original value, applying the specified memory ordering."}],"kind":"symbol","url":"\/documentation\/atomics\/atomicstorage\/atomicexchange(_:at:ordering:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicExchange"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"required":true},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicRawRepresentableStorage":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicRawRepresentableStorage"}],"abstract":[{"text":"The default atomic storage representation for an atomic ","type":"text"},{"code":"RawRepresentable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type whose "},{"type":"codeVoice","code":"RawValue"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":"."}],"url":"\/documentation\/atomics\/atomicrawrepresentablestorage","navigatorTitle":[{"kind":"identifier","text":"AtomicRawRepresentableStorage"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage","title":"AtomicRawRepresentableStorage","type":"topic","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicLoad(at:ordering:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicLoad(at:ordering:)","url":"\/documentation\/atomics\/atomicstorage\/atomicload(at:ordering:)","role":"symbol","kind":"symbol","required":true,"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicLoad"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"title":"atomicLoad(at:ordering:)","abstract":[{"type":"text","text":"Atomically loads and returns the value referenced by the given pointer,"},{"type":"text","text":" "},{"type":"text","text":"applying the specified memory ordering."}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","required":true,"kind":"symbol","url":"\/documentation\/atomics\/atomicstorage\/atomiccompareexchange(expected:desired:at:successordering:failureordering:)","title":"atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","abstract":[{"text":"Perform an atomic compare and exchange operation on the value referenced","type":"text"},{"text":" ","type":"text"},{"text":"by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"text":", applying the specified success\/failure memory orderings.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicWeakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"failureOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"url":"\/documentation\/atomics\/atomicstorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)","type":"topic","abstract":[{"text":"Perform an atomic weak compare and exchange operation on the value","type":"text"},{"text":" ","type":"text"},{"text":"referenced by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"text":", applying the specified success\/failure memory","type":"text"},{"text":" ","type":"text"},{"text":"orderings. This compare-exchange variant is allowed to spuriously fail; it","type":"text"},{"text":" ","type":"text"},{"text":"is designed to be called in a loop until it indicates a successful","type":"text"},{"text":" ","type":"text"},{"text":"exchange has happened.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","kind":"symbol","required":true}}}