{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference"]]},"metadata":{"modules":[{"name":"Atomics"}],"symbolKind":"method","externalID":"s:7Atomics25UnsafeAtomicLazyReferenceV18storeIfNilThenLoadyxxnF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"storeIfNilThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Method","extendedModule":"Atomics","title":"storeIfNilThenLoad(_:)"},"abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"type":"text","text":" "},{"type":"text","text":"returns the initialized value. If this reference is already initialized,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"storeIfNilThenLoad(_:)"},{"type":"text","text":" discards its supplied argument and returns"},{"type":"text","text":" "},{"type":"text","text":"the current value without updating it."}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)"]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"desired","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example demonstrates how this can be used to implement a"},{"type":"text","text":" "},{"type":"text","text":"thread-safe lazily initialized reference:"}]},{"type":"codeListing","code":["class Image {","  var _histogram: UnsafeAtomicLazyReference<Histogram> = ...","","  \/\/ This is safe to call concurrently from multiple threads.","  var atomicLazyHistogram: Histogram {","    if let histogram = _histogram.load() { return foo }","    \/\/ Note that code here may run concurrently on","    \/\/ multiple threads, but only one of them will get to","    \/\/ succeed setting the reference.","    let histogram = ...","    return _histogram.storeIfNilThenLoad(foo)","}"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"This operation uses acquiring-and-releasing memory ordering.","type":"text"}]}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics":{"abstract":[],"url":"\/documentation\/atomics","title":"Atomics","role":"collection","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/storeIfNilThenLoad(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"text":"Instance","kind":"typeIdentifier"}],"role":"symbol","title":"storeIfNilThenLoad(_:)","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","abstract":[{"type":"text","text":"Atomically initializes this reference if its current value is nil, then"},{"type":"text","text":" "},{"type":"text","text":"returns the initialized value. If this reference is already initialized,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"code":"storeIfNilThenLoad(_:)","type":"codeVoice"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"text":"the current value without updating it.","type":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference":{"abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"text":" ","type":"text"},{"text":"strong reference, requiring manual memory management of the","type":"text"},{"text":" ","type":"text"},{"text":"underlying storage representation.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference","url":"\/documentation\/atomics\/unsafeatomiclazyreference","title":"UnsafeAtomicLazyReference","type":"topic","kind":"symbol"}}}