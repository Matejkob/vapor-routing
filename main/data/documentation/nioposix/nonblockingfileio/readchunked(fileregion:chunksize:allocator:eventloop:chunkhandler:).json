{"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Read a "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" in chunks of "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes on "},{"type":"codeVoice","code":"NonBlockingFileIO"},{"type":"text","text":"’s private thread"},{"type":"text","text":" "},{"type":"text","text":"pool which is separate from any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" thread."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10FileRegionV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","text":"FileRegion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" = NonBlockingFileIO.defaultChunkSize, "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","text":"EventLoop"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","text":"ByteBuffer"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The file region to read.","type":"text"}],"type":"paragraph"}],"name":"fileRegion"},{"content":[{"inlineContent":[{"type":"text","text":"The size of the individual chunks to deliver."}],"type":"paragraph"}],"name":"chunkSize"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":" used to allocate space for the chunks."}]}],"name":"allocator"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" to call ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" on.","type":"text"}]}],"name":"eventLoop"},{"content":[{"inlineContent":[{"type":"text","text":"Called for every chunk read. The next chunk will be read upon successful completion of the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". If the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" fails, the overall operation is aborted."}],"type":"paragraph"}],"name":"chunkHandler"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" which is the result of the overall operation. If either the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" fails, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will fail too. If the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" as well as ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" always succeeded, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will succeed too.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" will be called on "},{"type":"codeVoice","code":"eventLoop"},{"type":"text","text":" for every chunk that was read. Assuming "},{"type":"codeVoice","code":"fileRegion.readableBytes"},{"type":"text","text":" is greater than"},{"type":"text","text":" "},{"type":"text","text":"zero and there are enough bytes available "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" will be called "},{"type":"codeVoice","code":"1 + |_ fileRegion.readableBytes \/ chunkSize _|"},{"type":"text","text":" "},{"type":"text","text":"times, delivering "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes each time. If less than "},{"type":"codeVoice","code":"fileRegion.readableBytes"},{"type":"text","text":" bytes can be read from the file,"},{"type":"text","text":" "},{"type":"codeVoice","code":"chunkHandler"},{"type":"text","text":" will be called less often with the last invocation possibly being of less than "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes."}],"type":"paragraph"},{"inlineContent":[{"text":"The allocation and reading of a subsequent chunk will only be attempted when ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" succeeds.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This method will not use the file descriptor’s seek pointer which means there is no danger of reading from the"},{"type":"text","text":" "},{"type":"text","text":"same "},{"code":"FileRegion","type":"codeVoice"},{"type":"text","text":" in multiple threads."}],"type":"paragraph"}]}],"metadata":{"role":"symbol","externalID":"s:8NIOPosix17NonBlockingFileIOV11readChunked10fileRegion9chunkSize9allocator9eventLoop0J7Handler7NIOCore05EventN6FutureCyytGAJ0dI0V_SiAJ19ByteBufferAllocatorVAJ0qN0_pAmJ0sT0VctF","symbolKind":"method","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileRegion"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore10FileRegionV","kind":"typeIdentifier","text":"FileRegion"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">"}],"modules":[{"name":"NIOPosix"}],"title":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/nonblockingfileio\/readchunked(fileregion:chunksize:allocator:eventloop:chunkhandler:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"url":"\/documentation\/nioposix\/nonblockingfileio","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}],"type":"topic","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"role":"symbol","kind":"symbol","title":"NonBlockingFileIO","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"role":"symbol","abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/bytebufferallocator","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","title":"ByteBufferAllocator"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)":{"abstract":[{"type":"text","text":"Read a "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" in chunks of "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes on "},{"type":"codeVoice","code":"NonBlockingFileIO"},{"type":"text","text":"’s private thread"},{"type":"text","text":" "},{"type":"text","text":"pool which is separate from any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" thread."}],"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileRegion","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10FileRegionV","text":"FileRegion","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","url":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(fileregion:chunksize:allocator:eventloop:chunkhandler:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"title":"NIOPosix","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","abstract":[],"type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"url":"\/documentation\/niocore\/eventloop","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"navigatorTitle":[{"text":"FileRegion","kind":"identifier"}],"title":"FileRegion","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FileRegion","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","url":"\/documentation\/niocore\/fileregion","abstract":[{"type":"text","text":"A "},{"code":"FileRegion","type":"codeVoice"},{"type":"text","text":" represent a readable portion usually created to be sent over the network."}],"type":"topic"}}}