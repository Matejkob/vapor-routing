{"metadata":{"roleHeading":"Instance Method","role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileHandle"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore13NIOFileHandleC","kind":"typeIdentifier","text":"NIOFileHandle"},{"kind":"text","text":", "},{"kind":"externalParam","text":"byteCount"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier","text":"ByteBufferAllocator"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"title":"readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","modules":[{"name":"NIOPosix"}],"externalID":"s:8NIOPosix17NonBlockingFileIOV11readChunked10fileHandle9byteCount9chunkSize9allocator9eventLoop0L7Handler7NIOCore05EventP6FutureCyytGAK07NIOFileI0C_S2iAK19ByteBufferAllocatorVAK0sP0_pAnK0vW0VctF"},"variants":[{"paths":["\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:bytecount:chunksize:allocator:eventloop:chunkhandler:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"abstract":[{"text":"Read ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" bytes in chunks of ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes from ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":"â€™s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" thread.","type":"text"}],"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readChunked"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileHandle"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NIOFileHandle","preciseIdentifier":"s:7NIOCore13NIOFileHandleC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle"},{"kind":"text","text":", "},{"kind":"externalParam","text":"byteCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":" = NonBlockingFileIO.defaultChunkSize, "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"},{"kind":"text","text":", "},{"kind":"externalParam","text":"chunkHandler"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"parameters":[{"name":"fileHandle","content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":" to read from.","type":"text"}],"type":"paragraph"}]},{"name":"byteCount","content":[{"type":"paragraph","inlineContent":[{"text":"The number of bytes to read from ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":".","type":"text"}]}]},{"name":"chunkSize","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The size of the individual chunks to deliver."}]}]},{"name":"allocator","content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"ByteBufferAllocator","type":"codeVoice"},{"text":" used to allocate space for the chunks.","type":"text"}]}]},{"name":"eventLoop","content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" to call "},{"code":"chunkHandler","type":"codeVoice"},{"type":"text","text":" on."}],"type":"paragraph"}]},{"name":"chunkHandler","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Called for every chunk read. The next chunk will be read upon successful completion of the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":". If the returned "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" fails, the overall operation is aborted."}]}]}],"kind":"parameters"},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" which is the result of the overall operation. If either the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" fails, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will fail too. If the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" as well as ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" always succeeded, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will succeed too.","type":"text"}]}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called on ","type":"text"},{"code":"eventLoop","type":"codeVoice"},{"text":" for every chunk that was read. Assuming ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" is greater than","type":"text"},{"text":" ","type":"text"},{"text":"zero and there are enough bytes available ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called ","type":"text"},{"code":"1 + |_ byteCount \/ chunkSize _|","type":"codeVoice"},{"text":" ","type":"text"},{"text":"times, delivering ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes each time. If less than ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" bytes can be read from ","type":"text"},{"code":"descriptor","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" will be called less often with the last invocation possibly being of less than ","type":"text"},{"code":"chunkSize","type":"codeVoice"},{"text":" bytes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The allocation and reading of a subsequent chunk will only be attempted when ","type":"text"},{"type":"codeVoice","code":"chunkHandler"},{"text":" succeeds.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"code":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)","type":"codeVoice"},{"type":"text","text":" should be preferred as it uses"},{"type":"text","text":" "},{"code":"FileRegion","type":"codeVoice"},{"type":"text","text":" object instead of raw "},{"code":"NIOFileHandle","type":"codeVoice"},{"type":"text","text":"s. In case you do want to use raw "},{"code":"NIOFileHandle","type":"codeVoice"},{"type":"text","text":"s,"},{"type":"text","text":" "},{"type":"text","text":"please consider using "},{"code":"readChunked(fileHandle:fromOffset:chunkSize:allocator:eventLoop:chunkHandler:)","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"because it doesnâ€™t use the file descriptorâ€™s seek pointer (which may be shared with other file"},{"type":"text","text":" "},{"type":"text","text":"descriptors and even across processes.)"}],"type":"paragraph"}]}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)":{"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","title":"readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","url":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:bytecount:chunksize:allocator:eventloop:chunkhandler:)","kind":"symbol","abstract":[{"text":"Read ","type":"text"},{"type":"codeVoice","code":"byteCount"},{"text":" bytes in chunks of ","type":"text"},{"type":"codeVoice","code":"chunkSize"},{"text":" bytes from ","type":"text"},{"type":"codeVoice","code":"fileHandle"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"NonBlockingFileIO"},{"text":"â€™s private thread","type":"text"},{"text":" ","type":"text"},{"text":"pool which is separate from any ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" thread.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOFileHandle","preciseIdentifier":"s:7NIOCore13NIOFileHandleC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"title":"NIOPosix","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","abstract":[],"type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"url":"\/documentation\/nioposix\/nonblockingfileio","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NonBlockingFileIO","kind":"identifier"}],"navigatorTitle":[{"text":"NonBlockingFileIO","kind":"identifier"}],"type":"topic","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" is a helper that allows you to read files without blocking the calling thread.","type":"text"}],"role":"symbol","kind":"symbol","title":"NonBlockingFileIO","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"url":"\/documentation\/niocore\/niofilehandle","title":"NIOFileHandle","kind":"symbol","navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" is a handle to an open file.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"url":"\/documentation\/niocore\/eventloop","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until itâ€™s closed.","type":"text"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"role":"symbol","abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libcâ€™s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/bytebufferallocator","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","title":"ByteBufferAllocator"}}}