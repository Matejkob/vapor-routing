{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap\/withInputOutputDescriptor(_:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withInputOutputDescriptor","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"fileDescriptor","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"CInt","preciseIdentifier":"s:s4CInta","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"kind":"parameters","parameters":[{"name":"fileDescriptor","content":[{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"Unix file descriptor"}],"type":"emphasis"},{"type":"text","text":" for the input & output."}],"type":"paragraph"}]}]},{"content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture<Channel>"},{"text":" to deliver the ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":".","type":"text"}]}],"kind":"content"},{"content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"text":"This method is useful for specialilsed use-cases where you want to use ","type":"text"},{"code":"NIOPipeBootstrap","type":"codeVoice"},{"text":" for say a serial line.","type":"text"}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If this method returns a succeeded future, SwiftNIO will close "},{"type":"codeVoice","code":"fileDescriptor"},{"type":"text","text":" when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" "},{"type":"text","text":"becomes inactive. You "},{"type":"emphasis","inlineContent":[{"text":"must not","type":"text"}]},{"type":"text","text":" do any further operations with "},{"type":"codeVoice","code":"fileDescriptor"},{"type":"text","text":", including "},{"type":"codeVoice","code":"close"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"If this method returns a failed future, you still own the file descriptor and are responsible for"},{"type":"text","text":" "},{"type":"text","text":"closing it."}]}],"style":"note","name":"Note"}],"kind":"content"}],"sections":[],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/niopipebootstrap\/withinputoutputdescriptor(_:)"]}],"metadata":{"title":"withInputOutputDescriptor(_:)","externalID":"s:8NIOPosix16NIOPipeBootstrapC25withInputOutputDescriptory7NIOCore15EventLoopFutureCyAE7Channel_pGs5Int32VF","symbolKind":"method","role":"symbol","roleHeading":"Instance Method","modules":[{"name":"NIOPosix"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withInputOutputDescriptor"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s4CInta","text":"CInt"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":">"}]},"abstract":[{"text":"Create the ","type":"text"},{"code":"PipeChannel","type":"codeVoice"},{"text":" with the provided file descriptor which is used for both input & output.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"title":"NIOPosix","url":"\/documentation\/nioposix","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","abstract":[],"type":"topic","kind":"symbol","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NIOPipeBootstrap":{"abstract":[{"type":"text","text":"A "},{"code":"NIOPipeBootstrap","type":"codeVoice"},{"type":"text","text":" is an easy way to bootstrap a "},{"code":"PipeChannel","type":"codeVoice"},{"type":"text","text":" which uses two (uni-directional) UNIX pipes"},{"type":"text","text":" "},{"type":"text","text":"and makes a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" out of them."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap","url":"\/documentation\/nioposix\/niopipebootstrap","role":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOPipeBootstrap","kind":"identifier"}],"kind":"symbol","title":"NIOPipeBootstrap","navigatorTitle":[{"text":"NIOPipeBootstrap","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NIOPipeBootstrap/withInputOutputDescriptor(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NIOPipeBootstrap\/withInputOutputDescriptor(_:)","title":"withInputOutputDescriptor(_:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withInputOutputDescriptor"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"CInt","preciseIdentifier":"s:s4CInta"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":">"}],"url":"\/documentation\/nioposix\/niopipebootstrap\/withinputoutputdescriptor(_:)","kind":"symbol","abstract":[{"type":"text","text":"Create the "},{"type":"codeVoice","code":"PipeChannel"},{"type":"text","text":" with the provided file descriptor which is used for both input & output."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Channel","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"url":"\/documentation\/niocore\/channel"}}}