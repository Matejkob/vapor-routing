{"defaultImplementationsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-6sp2m"],"title":"AlgebraicField Implementations"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal"],"title":"Real Implementations"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"? { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"If self is zero and the type has no representation for infinity (as"},{"type":"text","text":" "},{"type":"text","text":"in a typical finite field implementation), or if a reciprocal would"},{"type":"text","text":" "},{"type":"text","text":"overflow or underflow such that it cannot be accurately represented,"},{"type":"text","text":" "},{"type":"text","text":"the result is nil."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that "},{"code":".zero.reciprocal","type":"codeVoice"},{"type":"text","text":", somewhat surprisingly, is "},{"inlineContent":[{"text":"not","type":"text"}],"type":"emphasis"},{"type":"text","text":" nil"},{"type":"text","text":" "},{"type":"text","text":"for "},{"code":"Real","type":"codeVoice"},{"type":"text","text":" or "},{"code":"Complex","type":"codeVoice"},{"type":"text","text":" types, because these types have an"},{"type":"text","text":" "},{"code":".infinity","type":"codeVoice"},{"type":"text","text":" value that acts as the reciprocal of "},{"code":".zero","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"x.reciprocal"},{"text":" is non-nil, you may be able to replace division by ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" ","type":"text"},{"text":"with multiplication by this value. It is not advantageous to do this","type":"text"},{"text":" ","type":"text"},{"text":"for an isolated division unless it is a compile-time constant visible","type":"text"},{"text":" ","type":"text"},{"text":"to the compiler, but if you are dividing many values by a single","type":"text"},{"text":" ","type":"text"},{"text":"denominator, this will often be a significant performance win.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that this will slightly perturb results for some fields with"},{"type":"text","text":" "},{"type":"text","text":"approximate arithmetic, such as real types–using a normal division"},{"type":"text","text":" "},{"type":"text","text":"is generally more accurate–but no catastrophic loss of accuracy will"},{"type":"text","text":" "},{"type":"text","text":"result. For fields with exact arithmetic, or for the Complex types,"},{"type":"text","text":" "},{"type":"text","text":"the results are identical."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A typical use case looks something like this:"}]},{"code":["func divide<T: AlgebraicField>(data: [T], by divisor: T) -> [T] {","  \/\/ If divisor is well-scaled, multiply by reciprocal.","  if let recip = divisor.reciprocal {","    return data.map { $0 * recip }","  }","  \/\/ Fallback on using division.","  return data.map { $0 \/ divisor }","}"],"type":"codeListing","syntax":null}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"metadata":{"required":true,"modules":[{"name":"RealModule"}],"role":"symbol","externalID":"s:10RealModule14AlgebraicFieldP10reciprocalxSgvp","roleHeading":"Instance Property","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"reciprocal","symbolKind":"property"},"references":{"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField/reciprocal-156o3":{"required":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"title":"reciprocal","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"defaultImplementations":2,"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3","url":"\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3"},"doc://co.pointfree.VaporRouting/documentation/RealModule/Real/reciprocal":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"title":"reciprocal","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal","url":"\/documentation\/realmodule\/real\/reciprocal"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField/reciprocal-6sp2m":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"reciprocal","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Implementations should be "},{"inlineContent":[{"type":"text","text":"conservative"}],"type":"emphasis"},{"type":"text","text":" with the reciprocal property;"},{"type":"text","text":" "},{"type":"text","text":"it is OK to return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" even in cases where a reciprocal could be"},{"type":"text","text":" "},{"type":"text","text":"represented. For this reason, a default implementation that simply"},{"type":"text","text":" "},{"type":"text","text":"always returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" is correct, but conforming types should provide"},{"type":"text","text":" "},{"type":"text","text":"a better implementation if possible."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-6sp2m","url":"\/documentation\/realmodule\/algebraicfield\/reciprocal-6sp2m"},"https://en.wikipedia.org/wiki/Field_(mathematics)":{"type":"link","url":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","titleInlineContent":[{"type":"text","text":"field"}],"title":"field"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField":{"abstract":[{"text":"A type modeling an algebraic ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"},{"text":". Refines the ","type":"text"},{"type":"codeVoice","code":"SignedNumeric"},{"text":" protocol,","type":"text"},{"text":" ","type":"text"},{"text":"adding division.","type":"text"}],"navigatorTitle":[{"text":"AlgebraicField","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField","url":"\/documentation\/realmodule\/algebraicfield","kind":"symbol","type":"topic","title":"AlgebraicField","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AlgebraicField","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/RealModule":{"title":"RealModule","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/realmodule"}}}