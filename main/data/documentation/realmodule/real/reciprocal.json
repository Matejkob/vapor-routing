{"kind":"symbol","abstract":[{"text":"The (approximate) reciprocal (multiplicative inverse) of this number,","type":"text"},{"text":" ","type":"text"},{"text":"if it is representable.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"? { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"x"},{"type":"text","text":" if finite and nonzero, and "},{"type":"codeVoice","code":"1\/x"},{"type":"text","text":" overflows or underflows,"},{"type":"text","text":" "},{"type":"text","text":"then "},{"type":"codeVoice","code":"x.reciprocal"},{"type":"text","text":" is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Otherwise, "},{"type":"codeVoice","code":"a.reciprocal"},{"type":"text","text":" is "},{"type":"codeVoice","code":"1\/x"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"x.reciprocal"},{"text":" is non-nil, you may be able to replace division by ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" ","type":"text"},{"text":"with multiplication by this value. It is not advantageous to do this","type":"text"},{"text":" ","type":"text"},{"text":"for an isolated division unless it is a compile-time constant visible","type":"text"},{"text":" ","type":"text"},{"text":"to the compiler, but if you are dividing many values by a single","type":"text"},{"text":" ","type":"text"},{"text":"denominator, this will often be a significant performance win.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A typical use case looks something like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["func divide<T: Real>(data: [T], by divisor: T) -> [T] {","  \/\/ If divisor is well-scaled, multiply by reciprocal.","  if let recip = divisor.reciprocal {","    return data.map { $0 * recip }","  }","  \/\/ Fallback on using division.","  return data.map { $0 \/ divisor }","}"],"syntax":null},{"inlineContent":[{"text":"Error Bounds:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Multiplying by the reciprocal instead of dividing will slightly","type":"text"},{"text":" ","type":"text"},{"text":"perturb results. For example ","type":"text"},{"code":"5.0 \/ 3","type":"codeVoice"},{"text":" is 1.6666666666666667, but","type":"text"},{"text":" ","type":"text"},{"code":"5.0 * 3.reciprocal!","type":"codeVoice"},{"text":" is 1.6666666666666665.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The error of a normal division is bounded by half an ulp of the"},{"type":"text","text":" "},{"type":"text","text":"result; we can derive a quick error bound for multiplication by"},{"type":"text","text":" "},{"type":"text","text":"the real reciprocal (when it exists) as follows (I will use circle"},{"type":"text","text":" "},{"type":"text","text":"operators to denote real-number arithmetic, and normal operators"},{"type":"text","text":" "},{"type":"text","text":"for floating-point arithmetic):"}],"type":"paragraph"},{"type":"codeListing","code":["  a * b.reciprocal! = a * (1\/b)","                    = a * (1 ⊘ b)(1 + δ₁)","                    = (a ⊘ b)(1 + δ₁)(1 + δ₂)","                    = (a ⊘ b)(1 + δ₁ + δ₂ + δ₁δ₂)"],"syntax":null},{"inlineContent":[{"text":"where ","type":"text"},{"type":"codeVoice","code":"0 < δᵢ <= ulpOfOne\/2"},{"text":". This gives a roughly 1-ulp error,","type":"text"},{"text":" ","type":"text"},{"text":"about twice the error bound we get using division. For most","type":"text"},{"text":" ","type":"text"},{"text":"purposes this is an acceptable error, but if you need to match","type":"text"},{"text":" ","type":"text"},{"text":"results obtained using division, you should not use this.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField","doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3"]]},"metadata":{"extendedModule":"RealModule","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"reciprocal","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"externalID":"s:10RealModule0A0PAAE10reciprocalxSgvp","role":"symbol","roleHeading":"Instance Property","modules":[{"name":"RealModule"}],"symbolKind":"property","title":"reciprocal"},"schemaVersion":{"minor":3,"major":0,"patch":0},"variants":[{"paths":["\/documentation\/realmodule\/real\/reciprocal"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal"},"references":{"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField/reciprocal-156o3":{"required":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"title":"reciprocal","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"defaultImplementations":2,"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField\/reciprocal-156o3","url":"\/documentation\/realmodule\/algebraicfield\/reciprocal-156o3"},"doc://co.pointfree.VaporRouting/documentation/RealModule/AlgebraicField":{"abstract":[{"text":"A type modeling an algebraic ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"},{"text":". Refines the ","type":"text"},{"type":"codeVoice","code":"SignedNumeric"},{"text":" protocol,","type":"text"},{"text":" ","type":"text"},{"text":"adding division.","type":"text"}],"navigatorTitle":[{"text":"AlgebraicField","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/AlgebraicField","url":"\/documentation\/realmodule\/algebraicfield","kind":"symbol","type":"topic","title":"AlgebraicField","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AlgebraicField","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/RealModule":{"title":"RealModule","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/realmodule"},"doc://co.pointfree.VaporRouting/documentation/RealModule/Real/reciprocal":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"reciprocal"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"?"}],"title":"reciprocal","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"The (approximate) reciprocal (multiplicative inverse) of this number,"},{"type":"text","text":" "},{"type":"text","text":"if it is representable."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/Real\/reciprocal","url":"\/documentation\/realmodule\/real\/reciprocal"},"https://en.wikipedia.org/wiki/Field_(mathematics)":{"type":"link","titleInlineContent":[{"text":"field","type":"text"}],"url":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)","title":"field","identifier":"https:\/\/en.wikipedia.org\/wiki\/Field_(mathematics)"}}}