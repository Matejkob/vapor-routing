{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/ElementaryFunctions\/expMinusOne(_:)"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"abstract":[{"type":"text","text":"exp(x) - 1, computed in such a way as to maintain accuracy for small x."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"expMinusOne"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"x"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"code":"x","type":"codeVoice"},{"type":"text","text":" is close to zero, the expression "},{"code":".exp(x) - 1","type":"codeVoice"},{"type":"text","text":" suffers from"},{"type":"text","text":" "},{"type":"text","text":"catastrophic cancellation and the result will not have full accuracy."},{"type":"text","text":" "},{"type":"text","text":"The "},{"code":".expMinusOne(x)","type":"codeVoice"},{"type":"text","text":" function gives you a means to address this problem."}]},{"type":"paragraph","inlineContent":[{"text":"As an example, consider the expression ","type":"text"},{"code":"(x + 1)*exp(x) - 1","type":"codeVoice"},{"text":".  When ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" ","type":"text"},{"text":"is smaller than ","type":"text"},{"code":".ulpOfOne","type":"codeVoice"},{"text":", this expression evaluates to ","type":"text"},{"code":"0.0","type":"codeVoice"},{"text":", when it","type":"text"},{"text":" ","type":"text"},{"text":"should actually round to ","type":"text"},{"code":"2*x","type":"codeVoice"},{"text":". We can get a full-accuracy result by","type":"text"},{"text":" ","type":"text"},{"text":"using the following instead:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let t = .expMinusOne(x)","return x*(t+1) + t       \/\/ x*exp(x) + (exp(x)-1) = (x+1)*exp(x) - 1"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This re-written expression delivers an accurate result for all values"},{"type":"text","text":" "},{"type":"text","text":"of "},{"code":"x","type":"codeVoice"},{"type":"text","text":", not just for small values."}]},{"type":"heading","text":"See also:","level":2,"anchor":"See-also"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"exp()","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"exp2()","type":"codeVoice"},{"text":" (for types conforming to ","type":"text"},{"code":"RealFunctions","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"exp10()","type":"codeVoice"},{"type":"text","text":" (for types conforming to "},{"code":"RealFunctions","type":"codeVoice"},{"type":"text","text":")"}]}]}]}]}],"metadata":{"externalID":"s:10RealModule19ElementaryFunctionsP11expMinusOneyxxFZ","role":"symbol","title":"expMinusOne(_:)","symbolKind":"method","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"expMinusOne","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"modules":[{"name":"RealModule"}],"roleHeading":"Type Method","required":true},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/realmodule\/elementaryfunctions\/expminusone(_:)"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/ElementaryFunctions"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/RealModule":{"title":"RealModule","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule","abstract":[],"role":"collection","kind":"symbol","url":"\/documentation\/realmodule"},"doc://co.pointfree.VaporRouting/documentation/RealModule/ElementaryFunctions/expMinusOne(_:)":{"title":"expMinusOne(_:)","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/ElementaryFunctions\/expMinusOne(_:)","url":"\/documentation\/realmodule\/elementaryfunctions\/expminusone(_:)","required":true,"type":"topic","abstract":[{"type":"text","text":"exp(x) - 1, computed in such a way as to maintain accuracy for small x."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"expMinusOne","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/RealModule/ElementaryFunctions":{"url":"\/documentation\/realmodule\/elementaryfunctions","title":"ElementaryFunctions","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/RealModule\/ElementaryFunctions","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ElementaryFunctions","kind":"identifier"}],"navigatorTitle":[{"text":"ElementaryFunctions","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that has elementary functions available."}],"role":"symbol","type":"topic"}}}