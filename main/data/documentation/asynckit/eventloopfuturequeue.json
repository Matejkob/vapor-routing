{"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/init(eventLoop:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/eventLoop"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-1fw85","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-3i4m4","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(onPrevious:generator:)"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError"]}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asynckit\/eventloopfuturequeue"]}],"metadata":{"role":"symbol","symbolKind":"class","modules":[{"name":"AsyncKit"}],"title":"EventLoopFutureQueue","externalID":"s:8AsyncKit20EventLoopFutureQueueC","roleHeading":"Class","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFutureQueue","kind":"identifier"}]},"abstract":[{"text":"Allows you to queue closures that produce an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":", so each future only gets run if the previous ones complete, succeed, or fail.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFutureQueue"}],"platforms":["Linux"]}],"kind":"declarations"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue"},"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(onPrevious:generator:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(onPrevious:generator:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"onPrevious","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC","text":"EventLoopFutureQueue","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO","text":"ContinueCondition","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"generator","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(onprevious:generator:)","title":"append(onPrevious:generator:)","abstract":[{"type":"text","text":"Adds another "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":" producing closure to be run as soon as all previously queued future have completed, succeeded, or failed."}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/ContinueCondition":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContinueCondition","kind":"identifier"}],"navigatorTitle":[{"text":"ContinueCondition","kind":"identifier"}],"role":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition","title":"EventLoopFutureQueue.ContinueCondition","abstract":[{"type":"text","text":"Under what conditions an appended closure should be run."}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(each:_:)-1fw85":{"type":"topic","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(each:_:)-1fw85","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-1fw85","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"each"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":", ("},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<["},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"]>"}],"title":"append(each:_:)","abstract":[{"text":"For each element of the provided collection, invoke the given generator","type":"text"},{"text":" ","type":"text"},{"text":"and queue the returned future. Return a future whose value is an array","type":"text"},{"text":" ","type":"text"},{"text":"containing the result of each generated future in the same order as the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence. The resulting array is intended to have semantics","type":"text"},{"text":" ","type":"text"},{"text":"substantially similar to those provided by ","type":"text"},{"code":"EventLoop.flatten(_:on:)","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(_:runningOn:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)","role":"symbol","type":"topic","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(_:runningon:)","title":"append(_:runningOn:)","abstract":[{"text":"An overload for ","type":"text"},{"code":"append(generator:runningOn:)","type":"codeVoice"},{"text":" that takes in an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" as an auto closure to provide a better 1-liner API.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(() -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"runningOn","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopFutureQueue","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"ContinueCondition","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/ContinueError":{"abstract":[{"text":"Errors that get propogated based on a future’s completion status and the next appended closure’s continuation condition.","type":"text"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContinueError","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"EventLoopFutureQueue.ContinueError","type":"topic","navigatorTitle":[{"text":"ContinueError","kind":"identifier"}],"url":"\/documentation\/asynckit\/eventloopfuturequeue\/continueerror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueError"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"url":"\/documentation\/asynckit","type":"topic","title":"AsyncKit","abstract":[],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/init(eventLoop:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/init(eventLoop:)","title":"init(eventLoop:)","type":"topic","url":"\/documentation\/asynckit\/eventloopfuturequeue\/init(eventloop:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"EventLoopFutureQueue"},{"type":"text","text":" on a given event loop."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/eventLoop":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/eventLoop","kind":"symbol","title":"eventLoop","abstract":[{"type":"text","text":"The event loop that all the futures’s completions are handled on."}],"type":"topic","url":"\/documentation\/asynckit\/eventloopfuturequeue\/eventloop","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopFutureQueue","kind":"identifier"}],"role":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue","title":"EventLoopFutureQueue","abstract":[{"type":"text","text":"Allows you to queue closures that produce an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":", so each future only gets run if the previous ones complete, succeed, or fail."}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(each:_:)-3i4m4":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(each:_:)-3i4m4","kind":"symbol","title":"append(each:_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"each","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">"}],"url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(each:_:)-3i4m4","abstract":[{"text":"Same as ","type":"text"},{"type":"codeVoice","code":"append(each:_:)"},{"text":" above, but assumes all futures return ","type":"text"},{"type":"codeVoice","code":"Void"},{"text":" ","type":"text"},{"text":"and returns a ","type":"text"},{"code":"Void","type":"codeVoice"},{"text":" future instead of a result array.","type":"text"}],"type":"topic"}}}