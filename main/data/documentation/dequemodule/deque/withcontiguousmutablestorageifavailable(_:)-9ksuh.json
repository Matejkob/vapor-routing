{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule\/Deque\/withContiguousMutableStorageIfAvailable(_:)-9ksuh","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Call "},{"type":"codeVoice","code":"body(b)"},{"type":"text","text":", where "},{"type":"codeVoice","code":"b"},{"text":" is an unsafe buffer pointer to the deque’s","type":"text"},{"text":" ","type":"text"},{"text":"mutable contiguous storage. If the deque’s contents aren’t stored","type":"text"},{"text":" ","type":"text"},{"text":"contiguously, ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" is not called and ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" is returned. The supplied","type":"text"},{"text":" ","type":"text"},{"text":"buffer pointer is only valid for the duration of the call.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"body","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeMutableBufferPointer","kind":"typeIdentifier","preciseIdentifier":"s:Sr"},{"text":"<","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}]},{"parameters":[{"name":"body","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The function to invoke."}]}]}],"kind":"parameters"},{"content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"The value returned by "},{"type":"codeVoice","code":"body"},{"type":"text","text":", or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if "},{"type":"codeVoice","code":"body"},{"type":"text","text":" wasn’t called."}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Often, the optimizer can eliminate bounds- and uniqueness-checks within an"},{"type":"text","text":" "},{"type":"text","text":"algorithm, but when that fails, invoking the same algorithm on the unsafe"},{"type":"text","text":" "},{"type":"text","text":"buffer supplied to "},{"code":"body","type":"codeVoice"},{"type":"text","text":" lets you trade safety for speed."}]},{"style":"note","type":"aside","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(1) when this instance has a unique reference to its","type":"text"},{"type":"text","text":" "},{"type":"text","text":"underlying storage; O("},{"type":"codeVoice","code":"count"},{"type":"text","text":") otherwise. (Not counting the call to"},{"type":"text","text":" "},{"type":"codeVoice","code":"body"},{"type":"text","text":".)"}]}]}],"kind":"content"}],"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/dequemodule\/deque\/withcontiguousmutablestorageifavailable(_:)-9ksuh"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule","doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule\/Deque","doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule\/Deque\/MutableCollection-Implementations"]]},"metadata":{"symbolKind":"method","title":"withContiguousMutableStorageIfAvailable(_:)","externalID":"s:11DequeModule0A0V39withContiguousMutableStorageIfAvailableyqd__Sgqd__SryxGzKXEKlF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withContiguousMutableStorageIfAvailable","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"extendedModule":"DequeModule","modules":[{"name":"DequeModule"}],"roleHeading":"Instance Method","role":"symbol"},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/DequeModule/Deque/withContiguousMutableStorageIfAvailable(_:)-9ksuh":{"url":"\/documentation\/dequemodule\/deque\/withcontiguousmutablestorageifavailable(_:)-9ksuh","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule\/Deque\/withContiguousMutableStorageIfAvailable(_:)-9ksuh","abstract":[{"type":"text","text":"Call "},{"type":"codeVoice","code":"body(b)"},{"type":"text","text":", where "},{"code":"b","type":"codeVoice"},{"text":" is an unsafe buffer pointer to the deque’s","type":"text"},{"text":" ","type":"text"},{"text":"mutable contiguous storage. If the deque’s contents aren’t stored","type":"text"},{"text":" ","type":"text"},{"text":"contiguously, ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" is not called and "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" is returned. The supplied"},{"type":"text","text":" "},{"type":"text","text":"buffer pointer is only valid for the duration of the call."}],"role":"symbol","title":"withContiguousMutableStorageIfAvailable(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"withContiguousMutableStorageIfAvailable"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sr","text":"UnsafeMutableBufferPointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":">) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"?"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/DequeModule":{"kind":"symbol","type":"topic","title":"DequeModule","role":"collection","url":"\/documentation\/dequemodule","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/DequeModule/Deque/MutableCollection-Implementations":{"title":"MutableCollection Implementations","abstract":[],"role":"collectionGroup","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule\/Deque\/MutableCollection-Implementations","kind":"article","url":"\/documentation\/dequemodule\/deque\/mutablecollection-implementations"},"doc://co.pointfree.VaporRouting/documentation/DequeModule/Deque":{"kind":"symbol","type":"topic","title":"Deque","role":"symbol","url":"\/documentation\/dequemodule\/deque","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Deque","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/DequeModule\/Deque","navigatorTitle":[{"text":"Deque","kind":"identifier"}],"abstract":[{"text":"A collection implementing a double-ended queue. ","type":"text"},{"type":"codeVoice","code":"Deque"},{"text":" (pronounced “deck”)","type":"text"},{"text":" ","type":"text"},{"text":"implements an ordered random-access collection that supports efficient","type":"text"},{"text":" ","type":"text"},{"text":"insertions and removals from both ends.","type":"text"}]}}}