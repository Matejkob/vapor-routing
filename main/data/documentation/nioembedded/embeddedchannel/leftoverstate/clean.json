{"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState\/clean","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is clean, ie. no inbound, outbound, or pending outbound data left on "},{"type":"codeVoice","code":"finish"},{"text":".","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState"]]},"metadata":{"roleHeading":"Case","title":"EmbeddedChannel.LeftOverState.clean","symbolKind":"case","modules":[{"name":"NIOEmbedded"}],"fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"clean"}],"externalID":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO5cleanyA2EmF","role":"symbol"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clean","kind":"identifier"}]}],"kind":"declarations"}],"variants":[{"paths":["\/documentation\/nioembedded\/embeddedchannel\/leftoverstate\/clean"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState/clean":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState\/clean","url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate\/clean","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is clean, ie. no inbound, outbound, or pending outbound data left on "},{"type":"codeVoice","code":"finish"},{"type":"text","text":"."}],"type":"topic","title":"EmbeddedChannel.LeftOverState.clean","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"clean","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"abstract":[],"title":"NIOEmbedded","url":"\/documentation\/nioembedded","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LeftOverState"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","navigatorTitle":[{"kind":"identifier","text":"LeftOverState"}],"title":"EmbeddedChannel.LeftOverState","url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate","abstract":[{"code":"LeftOverState","type":"codeVoice"},{"type":"text","text":" represents any left-over inbound, outbound, and pending outbound events that hit the"},{"type":"text","text":" "},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" and were not consumed when ","type":"text"},{"code":"finish","type":"codeVoice"},{"text":" was called on the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"role":"symbol","title":"EmbeddedChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","kind":"symbol","type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Channel"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is in unit tests when you want to feed the inbound events","type":"text"},{"text":" ","type":"text"},{"text":"and check the outbound events manually.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}]}}}