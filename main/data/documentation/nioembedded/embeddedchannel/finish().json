{"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"sections":[],"variants":[{"paths":["\/documentation\/nioembedded\/embeddedchannel\/finish()"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"title":"finish()","externalID":"s:11NIOEmbedded15EmbeddedChannelC6finishAC13LeftOverStateOyKF","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"EmbeddedChannel","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"text":".","kind":"text"},{"text":"LeftOverState","kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"role":"symbol","modules":[{"name":"NIOEmbedded"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","text":"EmbeddedChannel","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","text":"LeftOverState","kind":"typeIdentifier"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"type":"heading","text":"Return Value"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"LeftOverState"},{"text":" of the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":". If all the inbound and outbound events have been","type":"text"},{"text":" ","type":"text"},{"text":"consumed (using ","type":"text"},{"type":"codeVoice","code":"readInbound"},{"text":" \/ ","type":"text"},{"type":"codeVoice","code":"readOutbound"},{"text":") and there are no pending outbound events (unflushed","type":"text"},{"text":" ","type":"text"},{"text":"writes) this will be ","type":"text"},{"type":"codeVoice","code":".clean"},{"text":". If there are any unconsumed inbound, outbound, or pending outbound","type":"text"},{"text":" ","type":"text"},{"text":"events, the ","type":"text"},{"type":"codeVoice","code":"EmbeddedChannel"},{"text":" will returns those as ","type":"text"},{"type":"codeVoice","code":".leftOvers(inbound:outbound:pendingOutbound:)"},{"text":".","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This method will throw if the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" hit any unconsumed errors or if the "},{"type":"codeVoice","code":"close"},{"type":"text","text":" fails. Errors in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" can be consumed using "},{"type":"codeVoice","code":"throwIfErrorCaught"},{"type":"text","text":"."}],"type":"paragraph"}]}],"kind":"symbol","abstract":[{"type":"text","text":"Synchronously closes the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish()"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"role":"symbol","title":"EmbeddedChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","kind":"symbol","type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Channel"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is in unit tests when you want to feed the inbound events","type":"text"},{"text":" ","type":"text"},{"text":"and check the outbound events manually.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"abstract":[],"title":"NIOEmbedded","url":"\/documentation\/nioembedded","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LeftOverState"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","navigatorTitle":[{"kind":"identifier","text":"LeftOverState"}],"title":"EmbeddedChannel.LeftOverState","url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate","abstract":[{"code":"LeftOverState","type":"codeVoice"},{"type":"text","text":" represents any left-over inbound, outbound, and pending outbound events that hit the"},{"type":"text","text":" "},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" and were not consumed when ","type":"text"},{"code":"finish","type":"codeVoice"},{"text":" was called on the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/finish()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"finish"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","text":"LeftOverState"}],"url":"\/documentation\/nioembedded\/embeddedchannel\/finish()","role":"symbol","type":"topic","title":"finish()","kind":"symbol","abstract":[{"type":"text","text":"Synchronously closes the "},{"code":"EmbeddedChannel","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish()"}}}