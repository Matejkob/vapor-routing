{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Inherited from "},{"type":"codeVoice","code":"Channel.pipeline"},{"type":"text","text":"."}],"variants":[{"paths":["\/documentation\/nioembedded\/embeddedchannel\/pipeline"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"symbolKind":"property","role":"symbol","roleHeading":"Instance Property","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"pipeline"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChannelPipeline","preciseIdentifier":"s:7NIOCore15ChannelPipelineC"}],"externalID":"s:11NIOEmbedded15EmbeddedChannelC8pipeline7NIOCore0C8PipelineCvp","title":"pipeline","modules":[{"name":"NIOEmbedded"}]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"pipeline"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","preciseIdentifier":"s:7NIOCore15ChannelPipelineC","text":"ChannelPipeline"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"see: ","type":"text"},{"code":"Channel.pipeline","type":"codeVoice"}]}]}],"type":"unorderedList"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/pipeline"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"role":"symbol","title":"EmbeddedChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","kind":"symbol","type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Channel"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is in unit tests when you want to feed the inbound events","type":"text"},{"text":" ","type":"text"},{"text":"and check the outbound events manually.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/pipeline":{"role":"symbol","kind":"symbol","title":"pipeline","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/pipeline","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"pipeline"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"ChannelPipeline","preciseIdentifier":"s:7NIOCore15ChannelPipelineC"}],"abstract":[],"url":"\/documentation\/nioembedded\/embeddedchannel\/pipeline"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"abstract":[],"title":"NIOEmbedded","url":"\/documentation\/nioembedded","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelPipeline","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","url":"\/documentation\/niocore\/channelpipeline","navigatorTitle":[{"text":"ChannelPipeline","kind":"identifier"}],"title":"ChannelPipeline","kind":"symbol","type":"topic","abstract":[{"text":"A list of ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s that handle or intercept inbound events and outbound operations of a"},{"type":"text","text":" "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":". "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" implements an advanced form of the Intercepting Filter pattern"},{"type":"text","text":" "},{"type":"text","text":"to give a user full control over how an event is handled and how the "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s in a pipeline"},{"type":"text","text":" "},{"text":"interact with each other.","type":"text"}],"role":"symbol"}}}