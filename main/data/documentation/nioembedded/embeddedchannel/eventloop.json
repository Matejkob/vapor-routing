{"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":" { "},{"kind":"keyword","text":"get"},{"kind":"text","text":" }"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"see: ","type":"text"},{"type":"codeVoice","code":"Channel.eventLoop"}]}]}],"type":"unorderedList"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioembedded\/embeddedchannel\/eventloop"]}],"abstract":[{"text":"Inherited from ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundInvoker.eventLoop"},{"text":".","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"metadata":{"modules":[{"name":"NIOEmbedded"}],"title":"eventLoop","symbolKind":"property","externalID":"s:11NIOEmbedded15EmbeddedChannelC9eventLoop7NIOCore05EventE0_pvp","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"identifier"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"}],"role":"symbol","roleHeading":"Instance Property"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/eventLoop","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"abstract":[],"title":"NIOEmbedded","url":"\/documentation\/nioembedded","kind":"symbol","type":"topic","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/eventLoop":{"abstract":[],"url":"\/documentation\/nioembedded\/embeddedchannel\/eventloop","kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/eventLoop","title":"eventLoop"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"url":"\/documentation\/niocore\/eventloop","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until itâ€™s closed.","type":"text"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"role":"symbol","title":"EmbeddedChannel","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EmbeddedChannel"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","kind":"symbol","type":"topic","url":"\/documentation\/nioembedded\/embeddedchannel","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Channel"},{"text":" implementation that does neither any","type":"text"},{"text":" ","type":"text"},{"text":"actual IO nor has a proper eventing mechanism. The prime use-case for","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is in unit tests when you want to feed the inbound events","type":"text"},{"text":" ","type":"text"},{"text":"and check the outbound events manually.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"EmbeddedChannel"}]}}}