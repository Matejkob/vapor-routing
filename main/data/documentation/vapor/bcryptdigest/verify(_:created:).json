{"metadata":{"role":"symbol","title":"verify(_:created:)","modules":[{"name":"Vapor"}],"externalID":"s:5Vapor12BCryptDigestC6verify_7createdSbSS_SStKF","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"verify","kind":"identifier"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"created","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"roleHeading":"Instance Method"},"sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"verify","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"plaintext","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"created","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"hash","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"name":"plaintext","content":[{"inlineContent":[{"text":"Plaintext data to digest and verify.","type":"text"}],"type":"paragraph"}]},{"name":"hash","content":[{"inlineContent":[{"type":"text","text":"Existing BCrypt hash to parse version, salt, and existing digest from."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","level":2,"text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the hash was created from the supplied plaintext data."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"code":["let hash = try BCrypt.hash(\"vapor\", cost: 4)","try BCrypt.verify(\"vapor\", created: hash) \/\/ true","try BCrypt.verify(\"foo\", created: hash) \/\/ false"],"type":"codeListing","syntax":null},{"content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"CryptoError"},{"type":"text","text":" if hashing fails or if data conversion fails."}],"type":"paragraph"}],"style":"note","type":"aside","name":"Throws"}]}],"variants":[{"paths":["\/documentation\/vapor\/bcryptdigest\/verify(_:created:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/BCryptDigest\/verify(_:created:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/BCryptDigest"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Verifies an existing BCrypt hash matches the supplied plaintext value. Verification works by parsing the salt and version from","type":"text"},{"text":" ","type":"text"},{"text":"the existing digest and using that information to hash the plaintext data. If hash digests match, this method returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Vapor/BCryptDigest/verify(_:created:)":{"kind":"symbol","url":"\/documentation\/vapor\/bcryptdigest\/verify(_:created:)","title":"verify(_:created:)","type":"topic","abstract":[{"text":"Verifies an existing BCrypt hash matches the supplied plaintext value. Verification works by parsing the salt and version from","type":"text"},{"text":" ","type":"text"},{"text":"the existing digest and using that information to hash the plaintext data. If hash digests match, this method returns ","type":"text"},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/BCryptDigest\/verify(_:created:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"verify","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"created"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}]},"doc://co.pointfree.VaporRouting/documentation/Vapor/BCryptDigest":{"abstract":[{"text":"Creates and verifies BCrypt hashes. Normally you will not need to initialize one of these classes and you will","type":"text"},{"text":" ","type":"text"},{"text":"use the global ","type":"text"},{"type":"codeVoice","code":"BCrypt"},{"type":"text","text":" convenience instead."}],"navigatorTitle":[{"kind":"identifier","text":"BCryptDigest"}],"role":"symbol","kind":"symbol","url":"\/documentation\/vapor\/bcryptdigest","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"BCryptDigest"}],"title":"BCryptDigest","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/BCryptDigest"},"doc://co.pointfree.VaporRouting/documentation/Vapor":{"url":"\/documentation\/vapor","title":"Vapor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","kind":"symbol","type":"topic","abstract":[],"role":"collection"}}}