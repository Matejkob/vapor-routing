{"variants":[{"paths":["\/documentation\/vapor\/authenticatable\/guardmiddleware(throwing:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Authenticatable"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Authenticatable\/guardMiddleware(throwing:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"guardMiddleware","kind":"identifier"},{"text":"(","kind":"text"},{"text":"throwing","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"error","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":" = Abort(.unauthorized, reason: \"\\(Self.self) not authenticated.\")) -> ","kind":"text"},{"text":"Middleware","kind":"typeIdentifier","preciseIdentifier":"s:5Vapor10MiddlewareP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Middleware"}],"platforms":["Linux"],"languages":["swift"]}]},{"parameters":[{"name":"throwing","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" to throw if the type is not authed.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this middleware to protect routes that might not otherwise attempt to access the"},{"type":"text","text":" "},{"type":"text","text":"authenticated user (which always requires prior authentication)."}]},{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"Authenticatable.guardMiddleware(...)"},{"text":" to create an instance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Use this middleware in conjunction with other middleware such as ","type":"text"},{"type":"codeVoice","code":"BearerAuthenticator"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"BasicAuthenticator"},{"text":" to do the actual authentication.","type":"text"}]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Type Method","externalID":"s:5Vapor15AuthenticatablePAAE15guardMiddleware8throwingAA0D0_ps5Error_p_tFZ","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"guardMiddleware"},{"kind":"text","text":"("},{"kind":"externalParam","text":"throwing"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier","text":"Error"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:5Vapor10MiddlewareP","kind":"typeIdentifier","text":"Middleware"}],"role":"symbol","modules":[{"name":"Vapor"}],"symbolKind":"method","extendedModule":"Vapor","title":"guardMiddleware(throwing:)"},"abstract":[{"text":"This middleware ensures that an ","type":"text"},{"code":"Authenticatable","type":"codeVoice"},{"text":" type ","type":"text"},{"code":"A","type":"codeVoice"},{"text":" has been authenticated","type":"text"},{"text":" ","type":"text"},{"text":"by a previous ","type":"text"},{"code":"Middleware","type":"codeVoice"},{"text":" or throws an ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":". The middlewares that actually perform","type":"text"},{"text":" ","type":"text"},{"text":"authentication will ","type":"text"},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" throw errors if they fail to authenticate the user (except in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"some exceptional cases like malformed data). This allows the middlewares to be composed"},{"type":"text","text":" "},{"type":"text","text":"together to create chains of authentication for multiple user types."}],"references":{"doc://co.pointfree.VaporRouting/documentation/Vapor/Middleware":{"title":"Middleware","navigatorTitle":[{"text":"Middleware","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Middleware","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Middleware","type":"topic","url":"\/documentation\/vapor\/middleware","role":"symbol","kind":"symbol","abstract":[{"type":"codeVoice","code":"Middleware"},{"text":" is placed between the server and your router. It is capable of","type":"text"},{"text":" ","type":"text"},{"text":"mutating both incoming requests and outgoing responses. ","type":"text"},{"type":"codeVoice","code":"Middleware"},{"text":" can choose","type":"text"},{"text":" ","type":"text"},{"text":"to pass requests on to the next ","type":"text"},{"type":"codeVoice","code":"Middleware"},{"text":" in a chain, or they can short circuit and","type":"text"},{"text":" ","type":"text"},{"text":"return a custom ","type":"text"},{"type":"codeVoice","code":"Response"},{"text":" if desired.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Vapor/Authenticatable":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Authenticatable","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Authenticatable","kind":"identifier"}],"navigatorTitle":[{"text":"Authenticatable","kind":"identifier"}],"abstract":[{"text":"Capable of being authenticated.","type":"text"}],"url":"\/documentation\/vapor\/authenticatable","title":"Authenticatable","type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Authenticatable/guardMiddleware(throwing:)":{"type":"topic","abstract":[{"type":"text","text":"This middleware ensures that an "},{"code":"Authenticatable","type":"codeVoice"},{"type":"text","text":" type "},{"code":"A","type":"codeVoice"},{"type":"text","text":" has been authenticated"},{"type":"text","text":" "},{"type":"text","text":"by a previous "},{"code":"Middleware","type":"codeVoice"},{"type":"text","text":" or throws an "},{"code":"Error","type":"codeVoice"},{"type":"text","text":". The middlewares that actually perform"},{"type":"text","text":" "},{"type":"text","text":"authentication will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" throw errors if they fail to authenticate the user (except in"},{"type":"text","text":" "},{"type":"text","text":"some exceptional cases like malformed data). This allows the middlewares to be composed"},{"type":"text","text":" "},{"type":"text","text":"together to create chains of authentication for multiple user types."}],"url":"\/documentation\/vapor\/authenticatable\/guardmiddleware(throwing:)","title":"guardMiddleware(throwing:)","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"guardMiddleware"},{"kind":"text","text":"("},{"kind":"externalParam","text":"throwing"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP","text":"Error"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:5Vapor10MiddlewareP","text":"Middleware"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Authenticatable\/guardMiddleware(throwing:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Vapor":{"url":"\/documentation\/vapor","title":"Vapor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","kind":"symbol","type":"topic","abstract":[],"role":"collection"}}}