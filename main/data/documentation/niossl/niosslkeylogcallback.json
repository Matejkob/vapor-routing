{"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","externalID":"s:6NIOSSL20NIOSSLKeyLogCallbacka","title":"NIOSSLKeyLogCallback","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSSLKeyLogCallback","kind":"identifier"}],"navigatorTitle":[{"text":"NIOSSLKeyLogCallback","kind":"identifier"}],"symbolKind":"typealias","roleHeading":"Type Alias","modules":[{"name":"NIOSSL"}]},"abstract":[{"text":"A callback that can be used to implement ","type":"text"},{"code":"SSLKEYLOGFILE","type":"codeVoice"},{"text":" support.","type":"text"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLKeyLogCallback","interfaceLanguage":"swift"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSSLKeyLogCallback","kind":"identifier"},{"text":" = (","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"Wireshark can decrypt packet captures that contain encrypted TLS connections if they have access to the","type":"text"},{"text":" ","type":"text"},{"text":"session keys used to perform the encryption. These keys are normally stored in a file that has a specific","type":"text"},{"text":" ","type":"text"},{"text":"file format. This callback is the low-level primitive that can be used to write such a file.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When set, this callback will be invoked once per secret. The provided ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will contain the bytes","type":"text"},{"text":" ","type":"text"},{"text":"that need to be written into the file, including the newline character.","type":"text"}],"type":"paragraph"},{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Please be aware that enabling support for "},{"code":"SSLKEYLOGFILE","type":"codeVoice"},{"type":"text","text":" through this callback will put the secrecy of"},{"type":"text","text":" "},{"type":"text","text":"your connections at risk. You should only do so when you are confident that it will not be possible to"},{"type":"text","text":" "},{"type":"text","text":"extract those secrets unnecessarily."}]}],"type":"aside","name":"Warning"}]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niossl\/niosslkeylogcallback"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLKeyLogCallback":{"navigatorTitle":[{"kind":"identifier","text":"NIOSSLKeyLogCallback"}],"type":"topic","kind":"symbol","abstract":[{"text":"A callback that can be used to implement ","type":"text"},{"code":"SSLKEYLOGFILE","type":"codeVoice"},{"text":" support.","type":"text"}],"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSSLKeyLogCallback"}],"title":"NIOSSLKeyLogCallback","role":"symbol","url":"\/documentation\/niossl\/niosslkeylogcallback","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLKeyLogCallback"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL":{"title":"NIOSSL","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL","kind":"symbol","abstract":[],"url":"\/documentation\/niossl","type":"topic","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]}}}