{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/unwrapData(_:as:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/channelcore\/unwrapdata(_:as:)"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"type":"text","text":"Unwraps the given "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a specific concrete type."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unwrapData","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"data","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"NIOAny","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":".Type = T.self) -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" to unwrap."}]}],"name":"data"},{"content":[{"inlineContent":[{"text":"The type to extract from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"as"}]},{"kind":"content","content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"The content of the "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is intended for use when writing custom "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementations."},{"type":"text","text":" "},{"type":"text","text":"This can safely be called in methods like "},{"type":"codeVoice","code":"write0"},{"type":"text","text":" to extract data from the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" "},{"type":"text","text":"provided in those cases."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that if the unwrap fails, this will cause a runtime trap. "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" "},{"type":"text","text":"implementations should be concrete about what types they support writing. If multiple"},{"type":"text","text":" "},{"type":"text","text":"types are supported, consider using a tagged union to store the type information like"},{"type":"text","text":" "},{"type":"text","text":"NIO’s own "},{"type":"codeVoice","code":"IOData"},{"type":"text","text":", which will minimise the amount of runtime type checking."}]}]}],"metadata":{"modules":[{"name":"NIOCore"}],"extendedModule":"NIOCore","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","kind":"typeIdentifier","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"}],"symbolKind":"method","roleHeading":"Instance Method","title":"unwrapData(_:as:)","externalID":"s:7NIOCore11ChannelCorePAAE10unwrapData_2asqd__AA6NIOAnyV_qd__mtlF"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/unwrapData(_:as:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/unwrapData(_:as:)","type":"topic","title":"unwrapData(_:as:)","abstract":[{"text":"Unwraps the given ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" as a specific concrete type.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unwrapData","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"}],"kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/channelcore\/unwrapdata(_:as:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","url":"\/documentation\/niocore\/nioany","title":"NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","type":"topic","abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" the overhead of ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" just like ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" will contain them within an existential container.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"text":"The core ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" methods that are for internal use of the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation only.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}],"type":"topic","kind":"symbol","url":"\/documentation\/niocore\/channelcore","title":"ChannelCore","navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"}}}