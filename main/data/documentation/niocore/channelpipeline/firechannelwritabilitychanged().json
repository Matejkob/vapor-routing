{"abstract":[{"text":"Called when a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"’s writable state changes.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline\/fireChannelWritabilityChanged()"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline"]]},"variants":[{"paths":["\/documentation\/niocore\/channelpipeline\/firechannelwritabilitychanged()"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"metadata":{"roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fireChannelWritabilityChanged","kind":"identifier"},{"text":"()","kind":"text"}],"title":"fireChannelWritabilityChanged()","role":"symbol","modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore15ChannelPipelineC04fireB18WritabilityChangedyyF","symbolKind":"method"},"kind":"symbol","primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"fireChannelWritabilityChanged"},{"kind":"text","text":"()"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The writability state of a Channel depends on watermarks that can be set via "},{"type":"codeVoice","code":"Channel.setOption"},{"type":"text","text":" and how much data"},{"type":"text","text":" "},{"type":"text","text":"is still waiting to be transferred to the remote peer."},{"type":"text","text":" "},{"type":"text","text":"You should take care to enforce some kind of backpressure if the channel becomes unwritable which means "},{"type":"codeVoice","code":"Channel.isWritable"},{"type":"text","text":" "},{"type":"text","text":"will return "},{"type":"codeVoice","code":"false"},{"text":" to ensure you do not consume too much memory due to queued writes. What exactly you should do here depends on the","type":"text"},{"text":" ","type":"text"},{"text":"protocol and other semantics. But for example you may want to stop writing to the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" until ","type":"text"},{"code":"Channel.writable","type":"codeVoice"},{"text":" becomes","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" again or stop reading at all.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline/fireChannelWritabilityChanged()":{"role":"symbol","kind":"symbol","url":"\/documentation\/niocore\/channelpipeline\/firechannelwritabilitychanged()","abstract":[{"text":"Called when a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"’s writable state changes.","type":"text"}],"type":"topic","title":"fireChannelWritabilityChanged()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fireChannelWritabilityChanged","kind":"identifier"},{"text":"()","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline\/fireChannelWritabilityChanged()"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelPipeline","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","url":"\/documentation\/niocore\/channelpipeline","navigatorTitle":[{"text":"ChannelPipeline","kind":"identifier"}],"title":"ChannelPipeline","kind":"symbol","type":"topic","abstract":[{"text":"A list of ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s that handle or intercept inbound events and outbound operations of a"},{"type":"text","text":" "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":". "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" implements an advanced form of the Intercepting Filter pattern"},{"type":"text","text":" "},{"type":"text","text":"to give a user full control over how an event is handled and how the "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s in a pipeline"},{"type":"text","text":" "},{"text":"interact with each other.","type":"text"}],"role":"symbol"}}}