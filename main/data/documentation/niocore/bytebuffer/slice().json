{"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/bytebuffer\/slice()"]}],"sections":[],"metadata":{"modules":[{"name":"NIOCore"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"slice"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"}],"externalID":"s:7NIOCore10ByteBufferV5sliceACyF","role":"symbol","extendedModule":"NIOCore","symbolKind":"method","roleHeading":"Instance Method","title":"slice()"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/slice()","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Slice the readable bytes off this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" without modifying the reader index. This method will return a"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" sharing the underlying storage with the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" the method was invoked on. The returned"},{"type":"text","text":" "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will contain the bytes in the range "},{"type":"codeVoice","code":"readerIndex..<writerIndex"},{"type":"text","text":" of the original "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"slice","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier"}]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","level":2,"type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" sharing storage containing the readable bytes only.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" implements copy-on-write a copy of the storage will be automatically triggered when either of the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"s sharing storage is written to."}]}],"style":"note","type":"aside"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/slice()":{"kind":"symbol","abstract":[{"text":"Slice the readable bytes off this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" without modifying the reader index. This method will return a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" sharing the underlying storage with the ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" the method was invoked on. The returned","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" will contain the bytes in the range ","type":"text"},{"type":"codeVoice","code":"readerIndex..<writerIndex"},{"text":" of the original ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":".","type":"text"}],"title":"slice()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"slice","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"}],"url":"\/documentation\/niocore\/bytebuffer\/slice()","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/slice()","role":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"}}}