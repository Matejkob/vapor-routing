{"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"sections":[],"metadata":{"symbolKind":"method","modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method","title":"clear(minimumCapacity:)","externalID":"s:7NIOCore10ByteBufferV5clear15minimumCapacityys6UInt32V_tF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"text":"minimumCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt32","preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","platforms":[]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s6UInt32V","text":"UInt32"},{"kind":"text","text":")"}]}],"kind":"declarations"},{"parameters":[{"name":"minimumCapacity","content":[{"inlineContent":[{"text":"The minimum capacity that will be (re)allocated for this buffer","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"content":[{"type":"paragraph","inlineContent":[{"text":"This method will allocate if the underlying storage is referenced by another ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":". Even if an","type":"text"},{"text":" ","type":"text"},{"text":"allocation is necessary this will be cheaper as the copy of the storage is elided.","type":"text"}]}],"type":"aside","style":"note","name":"Note"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use an `Int` as the argument"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/clear(minimumCapacity:)-7qskn","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/niocore\/bytebuffer\/clear(minimumcapacity:)-7qskn"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/clear(minimumCapacity:)-7qskn":{"abstract":[{"type":"text","text":"Set both reader index and writer index to "},{"type":"codeVoice","code":"0"},{"type":"text","text":". This will reset the state of this "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" to the state"},{"type":"text","text":" "},{"type":"text","text":"of a freshly allocated one, if possible without allocations. This is the cheapest way to recycle a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" "},{"type":"text","text":"for a new use-case."}],"title":"clear(minimumCapacity:)","url":"\/documentation\/niocore\/bytebuffer\/clear(minimumcapacity:)-7qskn","deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"clear"},{"kind":"text","text":"("},{"kind":"externalParam","text":"minimumCapacity"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s6UInt32V","kind":"typeIdentifier","text":"UInt32"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/clear(minimumCapacity:)-7qskn","role":"symbol"}}}