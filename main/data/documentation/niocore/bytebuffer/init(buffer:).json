{"sections":[],"metadata":{"title":"init(buffer:)","modules":[{"name":"NIOCore"}],"role":"symbol","extendedModule":"NIOCore","symbolKind":"init","externalID":"s:7NIOCore10ByteBufferV6bufferA2C_tcfc","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":")"}],"roleHeading":"Initializer"},"kind":"symbol","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/niocore\/bytebuffer\/init(buffer:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"abstract":[{"type":"text","text":"Create a fresh "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" containing the readable bytes of "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":"."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","text":"ByteBuffer","kind":"typeIdentifier"},{"text":")","kind":"text"}]}],"kind":"declarations"},{"content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"inlineContent":[{"text":"This may allocate a new ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with enough space to fit ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" and potentially some extra space using","type":"text"},{"text":" ","type":"text"},{"text":"the default allocator.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"info: If you have access to a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":", ","type":"text"},{"code":"ChannelHandlerContext","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"ByteBufferAllocator","type":"codeVoice"},{"text":" we","type":"text"},{"text":" ","type":"text"},{"text":"recommend using ","type":"text"},{"code":"channel.allocator.buffer(buffer:)","type":"codeVoice"},{"text":". Or if you want to write multiple items into the","type":"text"},{"text":" ","type":"text"},{"text":"buffer use ","type":"text"},{"code":"channel.allocator.buffer(capacity: ...)","type":"codeVoice"},{"text":" to allocate a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" of the right","type":"text"},{"text":" ","type":"text"},{"text":"size followed by a ","type":"text"},{"code":"writeImmutableBuffer","type":"codeVoice"},{"text":" instead of using this method. This allows SwiftNIO to do","type":"text"},{"text":" ","type":"text"},{"text":"accounting and optimisations of resources acquired for operations on a given ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" in the future.","type":"text"}]}]}],"type":"unorderedList"},{"style":"note","content":[{"inlineContent":[{"text":"Use this method only if you deliberately want to reallocate a potentially smaller ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" than the","type":"text"},{"text":" ","type":"text"},{"text":"one you already have. Given that ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" is a value type, defensive copies are not necessary. If","type":"text"},{"text":" ","type":"text"},{"text":"you have a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" but would like the ","type":"text"},{"code":"readerIndex","type":"codeVoice"},{"text":" to start at ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", consider ","type":"text"},{"code":"readSlice","type":"codeVoice"},{"text":" instead.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note"}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/init(buffer:)":{"url":"\/documentation\/niocore\/bytebuffer\/init(buffer:)","kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Create a fresh "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" containing the readable bytes of "},{"type":"codeVoice","code":"buffer"},{"type":"text","text":"."}],"title":"init(buffer:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]}}}