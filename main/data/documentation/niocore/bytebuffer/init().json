{"kind":"symbol","variants":[{"paths":["\/documentation\/niocore\/bytebuffer\/init()"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init()"},"metadata":{"extendedModule":"NIOCore","role":"symbol","externalID":"s:7NIOCore10ByteBufferVACycfc","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"title":"init()","symbolKind":"init","modules":[{"name":"NIOCore"}],"roleHeading":"Initializer"},"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Return an empty ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" allocated with ","type":"text"},{"code":"ByteBufferAllocator()","type":"codeVoice"},{"text":".","type":"text"}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"text":"()","kind":"text"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Discussion","level":2,"anchor":"discussion","type":"heading"},{"inlineContent":[{"text":"Calling this constructor will not allocate because it will return a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" that wraps a shared storage","type":"text"},{"text":" ","type":"text"},{"text":"object. As soon as you write to the constructed buffer however, you will incur an allocation because a","type":"text"},{"text":" ","type":"text"},{"text":"copy-on-write will happen.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"info: If you have access to a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", "},{"type":"codeVoice","code":"ChannelHandlerContext"},{"type":"text","text":", or "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":" it is"},{"type":"text","text":" "},{"type":"text","text":"recommended using "},{"code":"channel.allocator.buffer(capacity: 0)","type":"codeVoice"},{"type":"text","text":". This allows SwiftNIO to do"},{"type":"text","text":" "},{"type":"text","text":"accounting and optimisations of resources acquired for operations on a given "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" in the future."}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/init()":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init()","title":"init()","type":"topic","role":"symbol","abstract":[{"text":"Return an empty ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" allocated with ","type":"text"},{"code":"ByteBufferAllocator()","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/niocore\/bytebuffer\/init()","fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}]}}}