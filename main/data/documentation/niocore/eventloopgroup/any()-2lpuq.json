{"abstract":[{"text":"Returns any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" from the ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":", a common choice is the current "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"."}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"name":"Warning","type":"aside","style":"warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot rely on the returned "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" being the current one, not all "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"s support"},{"type":"text","text":" "},{"type":"text","text":"choosing the current one. Use this method only if you are truly happy with "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" of this"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" instance."}]}]},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"text":"You will only receive the current ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" here iff the current ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" belongs to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":" you call ","type":"text"},{"type":"codeVoice","code":"any()"},{"text":" on.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"This method is useful having access to an ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":" without the knowledge of which ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" would be","type":"text"},{"text":" ","type":"text"},{"text":"the best one to select to create a new ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":". This commonly happens in libraries where the user","type":"text"},{"text":" ","type":"text"},{"text":"cannot indicate what ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" they would like their futures on.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Typically, it is faster to kick off a new operation on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"type":"text","text":" "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" because that minimised thread"},{"type":"text","text":" "},{"type":"text","text":"switches. Hence, if situations where you don’t need precise knowledge of what "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" some code is running"},{"type":"text","text":" "},{"type":"text","text":"on, use "},{"code":"any()","type":"codeVoice"},{"type":"text","text":" to indicate this."}],"type":"paragraph"},{"inlineContent":[{"text":"The rule of thumb is: If you are trying to do ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"load balancing","type":"text"}]},{"text":", use ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":". If you just want to create a new","type":"text"},{"text":" ","type":"text"},{"text":"future or kick off some operation, use ","type":"text"},{"code":"any()","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup"]]},"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"roleHeading":"Instance Method","symbolKind":"method","required":true,"modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore14EventLoopGroupP3anyAA0bC0_pyF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"role":"symbol","title":"any()"},"defaultImplementationsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop\/any()"],"title":"EventLoop Implementations"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-7m1zy"],"title":"EventLoopGroup Implementations"}],"variants":[{"paths":["\/documentation\/niocore\/eventloopgroup\/any()-2lpuq"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-2lpuq","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup/any()-7m1zy":{"title":"any()","url":"\/documentation\/niocore\/eventloopgroup\/any()-7m1zy","abstract":[{"text":"The default implementation of ","type":"text"},{"code":"any()","type":"codeVoice"},{"text":" just returns the ","type":"text"},{"code":"next()","type":"codeVoice"},{"text":" EventLoop but it’s highly recommended to","type":"text"},{"text":" ","type":"text"},{"text":"override this and return the current ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" if possible.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-7m1zy"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup/any()-2lpuq":{"type":"topic","title":"any()","required":true,"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"role":"symbol","abstract":[{"text":"Returns any ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" from the ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":", a common choice is the current ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"defaultImplementations":2,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-2lpuq","kind":"symbol","url":"\/documentation\/niocore\/eventloopgroup\/any()-2lpuq"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop/any()":{"type":"topic","title":"any()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"role":"symbol","abstract":[{"text":"An ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" forms a singular ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":", returning itself as ‘any’ ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop\/any()","kind":"symbol","url":"\/documentation\/niocore\/eventloop\/any()"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"kind":"symbol","title":"EventLoopGroup","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","url":"\/documentation\/niocore\/eventloopgroup","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"url":"\/documentation\/niocore\/eventloop","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop"}}}