{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"NIOAny","kind":"identifier"}]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"The most important use-cases for "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" are values travelling through the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" whose type can’t"},{"type":"text","text":" "},{"type":"text","text":"be calculated at compile time. For example:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"the "},{"type":"codeVoice","code":"channelRead"},{"type":"text","text":" of any "},{"type":"codeVoice","code":"ChannelInboundHandler"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"the "},{"type":"codeVoice","code":"write"},{"type":"text","text":" method of a "},{"type":"codeVoice","code":"ChannelOutboundHandler"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The abstraction that delivers a "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" to user code must provide a mechanism to unwrap a "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" as a"},{"type":"text","text":" "},{"type":"text","text":"certain type known at run-time. Canonical example:"}],"type":"paragraph"},{"syntax":null,"code":["class SandwichHandler: ChannelInboundHandler {","    typealias InboundIn = Bacon \/* we expected to be delivered `Bacon` ... *\/","    typealias InboundOut = Sandwich \/* ... and we will make and deliver a `Sandwich` from that *\/","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","         \/* we receive the `Bacon` as a `NIOAny` as at compile-time the exact configuration of the channel","            pipeline can't be computed. The pipeline can't be computed at compile time as it can change","            dynamically at run-time. Yet, we assert that in any configuration the channel handler before","            `SandwichHandler` does actually send us a stream of `Bacon`.","         *\/","         let bacon = self.unwrapInboundIn(data) \/* `Bacon` or crash *\/","         let sandwich = makeSandwich(bacon)","         context.fireChannelRead(self.wrapInboundOut(sandwich)) \/* as promised we deliver a wrapped `Sandwich` *\/","    }","}"],"type":"codeListing"}]}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}],"navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore6NIOAnyV","role":"symbol","title":"NIOAny","symbolKind":"struct","roleHeading":"Structure"},"abstract":[{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" is an opaque container for values of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type, similar to Swift’s builtin "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" type. Contrary to"},{"type":"text","text":" "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" the overhead of "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":" depends on the the type of the wrapped value. Certain types that are important"},{"type":"text","text":" "},{"type":"text","text":"for the performance of a SwiftNIO application like "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"type":"text","text":" can be expected"},{"type":"text","text":" "},{"type":"text","text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" as"},{"type":"text","text":" "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" just like "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" will contain them within an existential container."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations"],"title":"Default Implementations","generated":true}],"variants":[{"paths":["\/documentation\/niocore\/nioany"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","url":"\/documentation\/niocore\/nioany","title":"NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","type":"topic","abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" the overhead of ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" just like ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" will contain them within an existential container.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/init(_:)":{"url":"\/documentation\/niocore\/nioany\/init(_:)","type":"topic","role":"symbol","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)","abstract":[{"text":"Wrap a value in a ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":". In most cases you should not create a ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" directly using this constructor.","type":"text"},{"text":" ","type":"text"},{"text":"The abstraction that accepts values of type ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" must also provide a mechanism to do the wrapping. An","type":"text"},{"text":" ","type":"text"},{"text":"example is a ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" which provides ","type":"text"},{"code":"self.wrapInboundOut(aValueOfTypeInboundOut)","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/s23CustomStringConvertibleP":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP","type":"unresolvable","title":"Swift.CustomStringConvertible"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/CustomStringConvertible-Implementations":{"title":"CustomStringConvertible Implementations","kind":"article","type":"topic","abstract":[],"role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations","url":"\/documentation\/niocore\/nioany\/customstringconvertible-implementations"}}}