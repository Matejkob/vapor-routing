{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMapWithEventLoop"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewValue"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"callback","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Function that will receive the value of this ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" and return","type":"text"},{"text":" ","type":"text"},{"text":"a new ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":".","type":"text"}]}],"name":"callback"}]},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"A future that will receive the eventual value."}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows you to dynamically dispatch new asynchronous tasks as phases in a"},{"type":"text","text":" "},{"type":"text","text":"longer series of processing steps. Note that you can use the results of the"},{"type":"text","text":" "},{"type":"text","text":"current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" when determining how to dispatch the next operation."}]},{"type":"paragraph","inlineContent":[{"text":"This works well when you have APIs that already know how to return ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":"s.","type":"text"},{"text":" ","type":"text"},{"text":"You can do something with the result of one and just return the next future:","type":"text"}]},{"code":["let d1 = networkRequest(args).future()","let d2 = d1.flatMapWithEventLoop { t, eventLoop -> EventLoopFuture<NewValue> in","    eventLoop.makeSucceededFuture(t + 1)","}","d2.whenSuccess { u in","    NSLog(\"Result of second request: \\(u)\")","}"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note: In a sense, the "},{"type":"codeVoice","code":"EventLoopFuture<NewValue>"},{"type":"text","text":" is returned before it’s created."}]}]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"When the current "},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"type":"text","text":" is fulfilled, run the provided callback,"},{"type":"text","text":" "},{"type":"text","text":"which will provide a new "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" alongside the "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" associated with this future."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/eventloopfuture\/flatmapwitheventloop(_:)"]}],"metadata":{"symbolKind":"method","roleHeading":"Instance Method","title":"flatMapWithEventLoop(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"flatMapWithEventLoop","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","modules":[{"name":"NIOCore"}],"extendedModule":"NIOCore","externalID":"s:7NIOCore15EventLoopFutureC011flatMapWithbC0yACyqd__GAEx_AA0bC0_ptclF"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/flatMapWithEventLoop(_:)","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/flatMapWithEventLoop(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"flatMapWithEventLoop","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":">"}],"type":"topic","abstract":[{"text":"When the current ","type":"text"},{"code":"EventLoopFuture<Value>","type":"codeVoice"},{"text":" is fulfilled, run the provided callback,","type":"text"},{"text":" ","type":"text"},{"text":"which will provide a new ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" alongside the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" associated with this future.","type":"text"}],"kind":"symbol","role":"symbol","title":"flatMapWithEventLoop(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/flatMapWithEventLoop(_:)","url":"\/documentation\/niocore\/eventloopfuture\/flatmapwitheventloop(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"url":"\/documentation\/niocore\/eventloop","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop"}}}