{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"init","kind":"keyword"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"languages":["swift"]}]}],"metadata":{"title":"init(initialCapacity:)","externalID":"s:7NIOCore14CircularBufferV15initialCapacityACyxGSi_tcfc","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"modules":[{"name":"NIOCore"}],"role":"symbol","symbolKind":"init","extendedModule":"NIOCore","roleHeading":"Initializer"},"abstract":[{"type":"text","text":"Allocates a buffer that can hold up to "},{"type":"codeVoice","code":"initialCapacity"},{"type":"text","text":" elements and initialise an empty ring backed by"},{"type":"text","text":" "},{"type":"text","text":"the buffer. When the ring grows to more than "},{"type":"codeVoice","code":"initialCapacity"},{"type":"text","text":" elements the buffer will be expanded."}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)"]}],"kind":"symbol","schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/init(initialCapacity:)":{"role":"symbol","url":"\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)","type":"topic","title":"init(initialCapacity:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"initialCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","kind":"symbol","abstract":[{"type":"text","text":"Allocates a buffer that can hold up to "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" elements and initialise an empty ring backed by"},{"type":"text","text":" "},{"type":"text","text":"the buffer. When the ring grows to more than "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" elements the buffer will be expanded."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"title":"CircularBuffer","url":"\/documentation\/niocore\/circularbuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CircularBuffer","kind":"identifier"}],"abstract":[{"type":"text","text":"An automatically expanding ring buffer implementation backed by a "},{"type":"codeVoice","code":"ContiguousArray"},{"type":"text","text":". Even though this implementation"},{"type":"text","text":" "},{"type":"text","text":"will automatically expand if more elements than "},{"type":"codeVoice","code":"initialCapacity"},{"type":"text","text":" are stored, itâ€™s advantageous to prevent"},{"type":"text","text":" "},{"type":"text","text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","kind":"symbol","type":"topic","navigatorTitle":[{"text":"CircularBuffer","kind":"identifier"}],"role":"symbol"}}}