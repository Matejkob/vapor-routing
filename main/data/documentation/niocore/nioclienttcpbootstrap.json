{"sections":[],"kind":"symbol","abstract":[{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,","type":"text"},{"text":" ","type":"text"},{"text":"NIO Transport Services, or other ways.","type":"text"}],"variants":[{"paths":["\/documentation\/niocore\/nioclienttcpbootstrap"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap"],"title":"Instance Properties"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()"],"title":"Instance Methods"}],"metadata":{"symbolKind":"struct","role":"symbol","modules":[{"name":"NIOCore"}],"externalID":"s:7NIOCore21NIOClientTCPBootstrapV","navigatorTitle":[{"kind":"identifier","text":"NIOClientTCPBootstrap"}],"roleHeading":"Structure","title":"NIOClientTCPBootstrap","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTCPBootstrap"}]},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTCPBootstrap"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"content","content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"text":"Usually, to bootstrap a connection with SwiftNIO, you have to match the right ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":", the right bootstrap,","type":"text"},{"text":" ","type":"text"},{"text":"and the right TLS implementation. Typical choices involve:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"code":"MultiThreadedEventLoopGroup","type":"codeVoice"},{"type":"text","text":", "},{"code":"ClientBootstrap","type":"codeVoice"},{"type":"text","text":", and "},{"code":"NIOSSLClientHandler","type":"codeVoice"},{"type":"text","text":" (from"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","isActive":true,"type":"reference"},{"type":"text","text":") for NIO on BSD sockets."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"NIOTSEventLoopGroup"},{"text":", ","type":"text"},{"type":"codeVoice","code":"NIOTSConnectionBootstrap"},{"text":", and the Network.framework TLS implementation (all from","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services"},{"text":".","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"Bootstrapping connections that way works but is quite tedious for packages that support multiple ways of"},{"type":"text","text":" "},{"type":"text","text":"bootstrapping. The idea behind "},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" is to do all configuration in one place (when you initialize"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":") and then have a common API that works for all use-cases."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"code":["\/\/ This function combines the right pieces and returns you a \"universal client bootstrap\"","\/\/ (`NIOClientTCPBootstrap`). This allows you to bootstrap connections (with or without TLS) using either the","\/\/ NIO on sockets (`NIO`) or NIO on Network.framework (`NIOTransportServices`) stacks.","\/\/ The remainder of the code should be platform-independent.","func makeUniversalBootstrap(serverHostname: String) throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","    func useNIOOnSockets() throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","        let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","        let sslContext = try NIOSSLContext(configuration: TLSConfiguration.forClient())","        let bootstrap = try NIOClientTCPBootstrap(ClientBootstrap(group: group),","                                                  tls: NIOSSLClientTLSProvider(context: sslContext,","                                                                               serverHostname: serverHostname))","        return (bootstrap, group)","    }","","    #if canImport(Network)","    if #available(macOS 10.14, iOS 12, tvOS 12, watchOS 3, *) {","        \/\/ We run on a new-enough Darwin so we can use Network.framework","","        let group = NIOTSEventLoopGroup()","        let bootstrap = NIOClientTCPBootstrap(NIOTSConnectionBootstrap(group: group),","                                              tls: NIOTSClientTLSProvider())","        return (bootstrap, group)","    } else {","        \/\/ We're on Darwin but not new enough for Network.framework, so we fall back on NIO on BSD sockets.","        return try useNIOOnSockets()","    }","    #else","    \/\/ We are on a non-Darwin platform, so we'll use BSD sockets.","    return try useNIOOnSockets()","    #endif","}","","let (bootstrap, group) = try makeUniversalBootstrap(serverHostname: \"example.com\")","let connection = try bootstrap","        .channelInitializer { channel in","            channel.pipeline.addHandler(PrintEverythingHandler { _ in })","        }","        .enableTLS()","        .connect(host: \"example.com\", port: 443)","        .wait()"],"type":"codeListing","syntax":null}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(to:)":{"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(to:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","kind":"symbol","title":"connect(to:)","abstract":[{"type":"text","text":"Specify the "},{"code":"address","type":"codeVoice"},{"type":"text","text":" to connect to for the TCP "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that will be established."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13SocketAddressO","text":"SocketAddress"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connectTimeout(_:)":{"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connecttimeout(_:)","abstract":[],"kind":"symbol","role":"symbol","title":"connectTimeout(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connectTimeout","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7NIOCore10TimeAmountV","text":"TimeAmount","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelConvenienceOptions(_:)":{"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelconvenienceoptions(_:)","abstract":[{"text":"Specifies some ","type":"text"},{"code":"TCPConvenienceOption","type":"codeVoice"},{"text":"s to be applied to the channel.","type":"text"},{"text":" ","type":"text"},{"text":"These are preferred over regular channel options as they are easier to use and restrict","type":"text"},{"text":" ","type":"text"},{"text":"options to those which a normal user would consider.","type":"text"}],"kind":"symbol","role":"symbol","title":"channelConvenienceOptions(_:)","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelConvenienceOptions","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:7NIOCore14ChannelOptionsV","text":"ChannelOptions","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7NIOCore14ChannelOptionsV014TCPConvenienceC0V","text":"TCPConvenienceOptions","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}]},"https://github.com/apple/swift-nio-ssl":{"titleInlineContent":[{"type":"codeVoice","code":"swift-nio-ssl"}],"type":"link","title":"swift-nio-ssl","identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","url":"https:\/\/github.com\/apple\/swift-nio-ssl"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(unixDomainSocketPath:)":{"abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"unixDomainSocket"},{"type":"text","text":" path to connect to for the UDS "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that will be established."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"unixDomainSocketPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":">"}],"title":"connect(unixDomainSocketPath:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(unixdomainsocketpath:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelInitializer(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Initialize the connected "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}],"title":"channelInitializer(_:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelinitializer(_:)","type":"topic"},"https://github.com/apple/swift-nio-transport-services":{"type":"link","identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services","title":"swift-nio-transport-services","titleInlineContent":[{"type":"codeVoice","code":"swift-nio-transport-services"}],"url":"https:\/\/github.com\/apple\/swift-nio-transport-services"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/init(_:tls:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)","role":"symbol","title":"init(_:tls:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bootstrap","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"TLS","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Bootstrap","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"tls","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TLS","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/init(_:tls:)","abstract":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" using the underlying "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" alongside a compatible "},{"type":"codeVoice","code":"TLS"},{"text":" ","type":"text"},{"text":"implementation.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"abstract":[{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"type":"text","text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","title":"NIOClientTCPBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(host:port:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","role":"symbol","title":"connect(host:port:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"host","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"port","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":">"}],"kind":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(host:port:)","abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"host"},{"type":"text","text":" and "},{"type":"codeVoice","code":"port"},{"type":"text","text":" to connect to for the TCP "},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelOption(_:value:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","title":"channelOption(_:value:)","abstract":[{"text":"Specifies a ","type":"text"},{"type":"codeVoice","code":"ChannelOption"},{"text":" to be applied to the ","type":"text"},{"type":"codeVoice","code":"SocketChannel"},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channeloption(_:value:)","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelOption","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/underlyingBootstrap":{"abstract":[],"role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/underlyingbootstrap","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"underlyingBootstrap","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore29NIOClientTCPBootstrapProtocolP","text":"NIOClientTCPBootstrapProtocol","kind":"typeIdentifier"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap","title":"underlyingBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/enableTLS()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"enableTLS"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap"}],"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/enabletls()","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()","kind":"symbol","abstract":[],"title":"enableTLS()","role":"symbol"}}}