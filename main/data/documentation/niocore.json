{"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/niocore"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[[]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"},"metadata":{"role":"collection","modules":[{"name":"NIOCore"}],"title":"NIOCore","externalID":"NIOCore","roleHeading":"Framework","symbolKind":"module"},"schemaVersion":{"major":0,"minor":3,"patch":0},"topicSections":[{"title":"Classes","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPreconcurrencySendable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPOSIXFileMode","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramChannelError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddress":{"url":"\/documentation\/niocore\/socketaddress","title":"SocketAddress","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddress"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Represent a socket address to which we may want to connect or bind."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SocketAddress"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"kind":"symbol","title":"EventLoopGroup","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopGroup"}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"type":"topic","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","url":"\/documentation\/niocore\/eventloopgroup","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"url":"\/documentation\/niocore\/eventloopfuture","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Holder for a result that will be provided later."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOCloseOnErrorHandler":{"title":"NIOCloseOnErrorHandler","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" that closes the channel when an error is caught"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"NIOCloseOnErrorHandler","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/niocloseonerrorhandler","navigatorTitle":[{"text":"NIOCloseOnErrorHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","url":"\/documentation\/niocore\/nioany","title":"NIOAny","navigatorTitle":[{"text":"NIOAny","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","type":"topic","abstract":[{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" is an opaque container for values of "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" type, similar to Swift’s builtin "},{"type":"codeVoice","code":"Any"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" the overhead of ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" just like ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" will contain them within an existential container.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAny","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMark":{"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","url":"\/documentation\/niocore\/writebufferwatermark","title":"WriteBufferWaterMark","type":"topic","role":"symbol","deprecated":true,"kind":"symbol","navigatorTitle":[{"text":"WriteBufferWaterMark","kind":"identifier"}],"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WriteBufferWaterMark","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionName":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionName","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","url":"\/documentation\/niocore\/socketoptionname","navigatorTitle":[{"text":"SocketOptionName","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"SocketOptionName","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAttemptedToRemoveHandlerMultipleTimesError":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAttemptedToRemoveHandlerMultipleTimesError","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"The removal of a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" using "},{"type":"codeVoice","code":"ChannelPipeline.removeHandler"},{"type":"text","text":" has been attempted more than once."}],"url":"\/documentation\/niocore\/nioattemptedtoremovehandlermultipletimeserror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","title":"NIOAttemptedToRemoveHandlerMultipleTimesError","role":"symbol","type":"topic","navigatorTitle":[{"text":"NIOAttemptedToRemoveHandlerMultipleTimesError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPacketInfo":{"url":"\/documentation\/niocore\/niopacketinfo","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","navigatorTitle":[{"kind":"identifier","text":"NIOPacketInfo"}],"abstract":[],"type":"topic","title":"NIOPacketInfo","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"NIOPacketInfo"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"role":"symbol","abstract":[{"type":"text","text":"The preferred allocator for "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"malloc"},{"type":"text","text":", "},{"type":"codeVoice","code":"realloc"},{"type":"text","text":" and "},{"type":"codeVoice","code":"free"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/bytebufferallocator","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","title":"ByteBufferAllocator"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AdaptiveRecvByteBufferAllocator":{"role":"symbol","navigatorTitle":[{"text":"AdaptiveRecvByteBufferAllocator","kind":"identifier"}],"abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will gracefully increment or decrement the buffer size on the feedback that was recorded.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","type":"topic","title":"AdaptiveRecvByteBufferAllocator","url":"\/documentation\/niocore\/adaptiverecvbytebufferallocator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AdaptiveRecvByteBufferAllocator","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOData":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","role":"symbol","type":"topic","url":"\/documentation\/niocore\/iodata","kind":"symbol","abstract":[{"type":"codeVoice","code":"IOData"},{"type":"text","text":" unifies standard SwiftNIO types that are raw bytes of data; currently "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"IOData"}],"title":"IOData","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IOData"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSynchronousChannelOptions":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","abstract":[],"title":"NIOSynchronousChannelOptions","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"kind":"symbol","url":"\/documentation\/niocore\/niosynchronouschanneloptions"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelEvent":{"navigatorTitle":[{"kind":"identifier","text":"ChannelEvent"}],"kind":"symbol","title":"ChannelEvent","type":"topic","abstract":[{"type":"text","text":"An "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" related event that is passed through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" to notify the user."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","url":"\/documentation\/niocore\/channelevent","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelEvent"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RepeatedTask":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"RepeatedTask"}],"navigatorTitle":[{"kind":"identifier","text":"RepeatedTask"}],"abstract":[{"type":"text","text":"Returned once a task was scheduled to be repeatedly executed on the "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/niocore\/repeatedtask","title":"RepeatedTask"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOption":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOption","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/niocore\/socketoption","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","title":"SocketOption","role":"symbol","type":"topic","navigatorTitle":[{"text":"SocketOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionValue":{"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","navigatorTitle":[{"kind":"identifier","text":"SocketOptionValue"}],"type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketOptionValue"}],"title":"SocketOptionValue","url":"\/documentation\/niocore\/socketoptionvalue","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionProvider":{"type":"topic","url":"\/documentation\/niocore\/socketoptionprovider","title":"SocketOptionProvider","navigatorTitle":[{"kind":"identifier","text":"SocketOptionProvider"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketOptionProvider"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","kind":"symbol","abstract":[{"type":"text","text":"This protocol defines an object, most commonly a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", that supports"},{"type":"text","text":" "},{"type":"text","text":"setting and getting socket options (via "},{"type":"codeVoice","code":"setsockopt"},{"type":"text","text":"\/"},{"type":"codeVoice","code":"getsockopt"},{"type":"text","text":" or similar)."},{"type":"text","text":" "},{"type":"text","text":"It provides a strongly typed API that makes working with larger, less-common"},{"type":"text","text":" "},{"type":"text","text":"socket options easier than the "},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":" API allows."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundInvoker":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","role":"symbol","kind":"symbol","url":"\/documentation\/niocore\/channeloutboundinvoker","abstract":[{"type":"text","text":"Allows users to invoke an “outbound” operation related to a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that will flow through the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" until"},{"type":"text","text":" "},{"type":"text","text":"it will finally be executed by the the "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementation."}],"title":"ChannelOutboundInvoker","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOutboundInvoker"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelOutboundInvoker"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIODeadline":{"url":"\/documentation\/niocore\/niodeadline","type":"topic","title":"NIODeadline","navigatorTitle":[{"kind":"identifier","text":"NIODeadline"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIODeadline"}],"abstract":[{"text":"Represents a point in time.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotImplementedError":{"navigatorTitle":[{"kind":"identifier","text":"NIOMulticastNotImplementedError"}],"url":"\/documentation\/niocore\/niomulticastnotimplementederror","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOMulticastNotImplementedError"}],"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","abstract":[{"type":"text","text":"Multicast has not been properly implemented on this channel."}],"title":"NIOMulticastNotImplementedError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles inbound I\/O events for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","type":"topic","role":"symbol","title":"ChannelInboundHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInboundHandler"}],"kind":"symbol","url":"\/documentation\/niocore\/channelinboundhandler","navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DatagramChannelError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramChannelError","title":"DatagramChannelError","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"DatagramChannelError"}],"abstract":[],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatagramChannelError"}],"kind":"symbol","url":"\/documentation\/niocore\/datagramchannelerror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"abstract":[{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","type":"topic","role":"symbol","title":"ChannelOutboundHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOutboundHandler"}],"kind":"symbol","url":"\/documentation\/niocore\/channeloutboundhandler","navigatorTitle":[{"kind":"identifier","text":"ChannelOutboundHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteObservingByteToMessageDecoder":{"kind":"symbol","abstract":[{"type":"text","text":"Some "},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":"s need to observe "},{"code":"write","type":"codeVoice"},{"type":"text","text":"s (which are outbound events). "},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":"s which"},{"type":"text","text":" "},{"type":"text","text":"implement the "},{"code":"WriteObservingByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":" protocol will be notified about every outbound write."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteObservingByteToMessageDecoder"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder","title":"WriteObservingByteToMessageDecoder","url":"\/documentation\/niocore\/writeobservingbytetomessagedecoder","navigatorTitle":[{"kind":"identifier","text":"WriteObservingByteToMessageDecoder"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RemovableChannelHandler","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"RemovableChannelHandler","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that can be dynamically removed from a "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" whilst"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is operating normally."},{"type":"text","text":" "},{"type":"text","text":"A "},{"type":"codeVoice","code":"RemovableChannelHandler"},{"type":"text","text":" is required to remove itself from the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" (using"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandlerContext.removeHandler"},{"type":"text","text":") as soon as possible."}],"title":"RemovableChannelHandler","url":"\/documentation\/niocore\/removablechannelhandler","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MarkedCircularBuffer":{"navigatorTitle":[{"kind":"identifier","text":"MarkedCircularBuffer"}],"role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkedCircularBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","title":"MarkedCircularBuffer","url":"\/documentation\/niocore\/markedcircularbuffer","abstract":[{"text":"A circular buffer that allows one object at a time to be “marked” and easily identified and retrieved later.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"abstract":[{"text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough.","type":"text"},{"text":" ","type":"text"},{"text":"It will start reading again once pending data was written.","type":"text"}],"kind":"symbol","type":"topic","title":"BackPressureHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackPressureHandler","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"BackPressureHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/backpressurehandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"text":"The core ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" methods that are for internal use of the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" implementation only.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelCore"}],"type":"topic","kind":"symbol","url":"\/documentation\/niocore\/channelcore","title":"ChannelCore","navigatorTitle":[{"kind":"identifier","text":"ChannelCore"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ConnectTimeoutOption":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConnectTimeoutOption","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/niocore\/connecttimeoutoption","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","title":"ConnectTimeoutOption","role":"symbol","type":"topic","navigatorTitle":[{"text":"ConnectTimeoutOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvByteBufferAllocator":{"role":"symbol","navigatorTitle":[{"text":"RecvByteBufferAllocator","kind":"identifier"}],"abstract":[{"text":"Allocates ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"s to be used to read bytes from a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" and records the number of the actual bytes that were used.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","type":"topic","title":"RecvByteBufferAllocator","url":"\/documentation\/niocore\/recvbytebufferallocator","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecvByteBufferAllocator","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPOSIXFileMode":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPOSIXFileMode","title":"NIOPOSIXFileMode","abstract":[],"navigatorTitle":[{"text":"NIOPOSIXFileMode","kind":"identifier"}],"role":"symbol","url":"\/documentation\/niocore\/nioposixfilemode","kind":"symbol","type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOPOSIXFileMode","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AddressedEnvelope":{"title":"AddressedEnvelope","abstract":[{"type":"text","text":"A data structure for processing addressed datagrams, such as those used by UDP."}],"navigatorTitle":[{"text":"AddressedEnvelope","kind":"identifier"}],"url":"\/documentation\/niocore\/addressedenvelope","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AddressedEnvelope"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteEncoder":{"title":"MessageToByteEncoder","abstract":[{"type":"text","text":"A protocol for straightforward encoders which encode custom messages to "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"To add a "},{"code":"MessageToByteEncoder","type":"codeVoice"},{"type":"text","text":" to a "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":", use"},{"type":"text","text":" "},{"code":"channel.pipeline.addHandler(MessageToByteHandler(myEncoder)","type":"codeVoice"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageToByteEncoder"}],"url":"\/documentation\/niocore\/messagetobyteencoder","kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MessageToByteEncoder"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelError":{"role":"symbol","navigatorTitle":[{"text":"ChannelError","kind":"identifier"}],"title":"ChannelError","kind":"symbol","abstract":[{"type":"text","text":"An error that can occur on "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" operations."}],"url":"\/documentation\/niocore\/channelerror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelError","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopPromise":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","role":"symbol","kind":"symbol","url":"\/documentation\/niocore\/eventlooppromise","abstract":[{"type":"text","text":"A promise to provide a result later."}],"title":"EventLoopPromise","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopPromise"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"EventLoopPromise"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"url":"\/documentation\/niocore\/niofilehandle","title":"NIOFileHandle","kind":"symbol","navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" is a handle to an open file.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DatagramVectorReadMessageCountOption":{"title":"DatagramVectorReadMessageCountOption","type":"topic","deprecated":true,"url":"\/documentation\/niocore\/datagramvectorreadmessagecountoption","navigatorTitle":[{"kind":"identifier","text":"DatagramVectorReadMessageCountOption"}],"abstract":[],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatagramVectorReadMessageCountOption"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"abstract":[{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"type":"text","text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"role":"symbol","url":"\/documentation\/niocore\/nioclienttcpbootstrap","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","title":"NIOClientTCPBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteSpinOption":{"title":"WriteSpinOption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteSpinOption"}],"url":"\/documentation\/niocore\/writespinoption","abstract":[],"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption","navigatorTitle":[{"kind":"identifier","text":"WriteSpinOption"}],"kind":"symbol","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkDevice":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","role":"symbol","abstract":[{"type":"text","text":"A representation of a single network device on a system."}],"url":"\/documentation\/niocore\/nionetworkdevice","title":"NIONetworkDevice","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIONetworkDevice","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"NIONetworkDevice","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOBSDSocket":{"title":"NIOBSDSocket","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","abstract":[],"url":"\/documentation\/niocore\/niobsdsocket","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOBSDSocket"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOBSDSocket"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOExplicitCongestionNotificationState":{"title":"NIOExplicitCongestionNotificationState","navigatorTitle":[{"kind":"identifier","text":"NIOExplicitCongestionNotificationState"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOExplicitCongestionNotificationState"}],"abstract":[{"type":"text","text":"Possible Explicit Congestion Notification States"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","url":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelDuplexHandler":{"abstract":[{"type":"text","text":"A combination of "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"type":"text","text":"."}],"type":"topic","title":"ChannelDuplexHandler","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","navigatorTitle":[{"kind":"identifier","text":"ChannelDuplexHandler"}],"role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelDuplexHandler"}],"url":"\/documentation\/niocore\/channelduplexhandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FixedSizeRecvByteBufferAllocator":{"role":"symbol","navigatorTitle":[{"text":"FixedSizeRecvByteBufferAllocator","kind":"identifier"}],"abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will always return a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with the same fixed size no matter what was recorded.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","type":"topic","title":"FixedSizeRecvByteBufferAllocator","url":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FixedSizeRecvByteBufferAllocator","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoderError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteToMessageDecoderError"}],"navigatorTitle":[{"kind":"identifier","text":"ByteToMessageDecoderError"}],"role":"symbol","url":"\/documentation\/niocore\/bytetomessagedecodererror","title":"ByteToMessageDecoderError","abstract":[{"type":"text","text":"Common errors thrown by "},{"type":"codeVoice","code":"ByteToMessageDecoder"},{"type":"text","text":"s."}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddressError":{"kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddressError"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","role":"symbol","title":"SocketAddressError","abstract":[{"text":"Special ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" that may be thrown if we fail to create a ","type":"text"},{"code":"SocketAddress","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SocketAddressError"}],"type":"topic","url":"\/documentation\/niocore\/socketaddresserror"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferView":{"role":"symbol","title":"ByteBufferView","url":"\/documentation\/niocore\/bytebufferview","abstract":[{"text":"A view into a portion of a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","navigatorTitle":[{"kind":"identifier","text":"ByteBufferView"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteBufferView"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoder":{"role":"symbol","type":"topic","navigatorTitle":[{"text":"ByteToMessageDecoder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageDecoder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","url":"\/documentation\/niocore\/bytetomessagedecoder","title":"ByteToMessageDecoder","abstract":[{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":"s decode bytes in a stream-like fashion from ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" to another message type.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/TimeAmount":{"type":"topic","url":"\/documentation\/niocore\/timeamount","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"title":"TimeAmount","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}],"abstract":[{"text":"Represents a time ","type":"text"},{"inlineContent":[{"text":"interval","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Channel","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"kind":"symbol","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"url":"\/documentation\/niocore\/channel"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"title":"ByteToMessageHandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","type":"topic","abstract":[{"text":"A handler which turns a given ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" into a ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ByteToMessageHandler"}],"url":"\/documentation\/niocore\/bytetomessagehandler","navigatorTitle":[{"kind":"identifier","text":"ByteToMessageHandler"}],"role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BacklogOption":{"title":"BacklogOption","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","deprecated":true,"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BacklogOption","kind":"identifier"}],"role":"symbol","type":"topic","navigatorTitle":[{"text":"BacklogOption","kind":"identifier"}],"url":"\/documentation\/niocore\/backlogoption","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOptions":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOptions"}],"role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides "},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":"s to be used with a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ServerBootstrap"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelOptions"}],"url":"\/documentation\/niocore\/channeloptions","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","title":"ChannelOptions"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandlerContext":{"url":"\/documentation\/niocore\/channelhandlercontext","title":"ChannelHandlerContext","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandlerContext"}],"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Every "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" has – when added to a "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" – a corresponding "},{"code":"ChannelHandlerContext","type":"codeVoice"},{"type":"text","text":" which is"},{"type":"text","text":" "},{"type":"text","text":"the way "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s can interact with other "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s in the pipeline."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelHandlerContext"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"abstract":[{"type":"text","text":"You should "},{"type":"emphasis","inlineContent":[{"text":"never","type":"text"}]},{"type":"text","text":" implement this protocol directly. Please implement one of its sub-protocols."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","type":"topic","role":"symbol","title":"ChannelHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelHandler","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niocore\/channelhandler","navigatorTitle":[{"text":"ChannelHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOInsecureNoTLS":{"type":"topic","abstract":[],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","navigatorTitle":[{"text":"NIOInsecureNoTLS","kind":"identifier"}],"url":"\/documentation\/niocore\/nioinsecurenotls","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOInsecureNoTLS","kind":"identifier"}],"kind":"symbol","title":"NIOInsecureNoTLS"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/System":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System","role":"symbol","abstract":[],"url":"\/documentation\/niocore\/system","title":"System","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"System","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"System","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Scheduled":{"navigatorTitle":[{"text":"Scheduled","kind":"identifier"}],"url":"\/documentation\/niocore\/scheduled","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Returned once a task was scheduled on the "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" for later execution."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scheduled","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","title":"Scheduled"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CloseMode":{"navigatorTitle":[{"text":"CloseMode","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CloseMode","kind":"identifier"}],"abstract":[{"text":"Specify what kind of close operation is requested.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","title":"CloseMode","url":"\/documentation\/niocore\/closemode"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvAllocatorOption":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RecvAllocatorOption","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/niocore\/recvallocatoroption","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","title":"RecvAllocatorOption","role":"symbol","type":"topic","navigatorTitle":[{"text":"RecvAllocatorOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"url":"\/documentation\/niocore","title":"NIOCore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","kind":"symbol","type":"topic","abstract":[],"role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopError":{"abstract":[{"type":"text","text":"Different "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"s that are specific to "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" operations \/ implementations."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","navigatorTitle":[{"kind":"identifier","text":"EventLoopError"}],"title":"EventLoopError","type":"topic","url":"\/documentation\/niocore\/eventlooperror","kind":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopError"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSendable":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSendable","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/niocore\/niosendable","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","title":"NIOSendable","role":"symbol","type":"topic","navigatorTitle":[{"text":"NIOSendable","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllocatorOption":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AllocatorOption","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/niocore\/allocatoroption","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","title":"AllocatorOption","role":"symbol","type":"topic","navigatorTitle":[{"text":"AllocatorOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionLevel":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionLevel","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","url":"\/documentation\/niocore\/socketoptionlevel","navigatorTitle":[{"text":"SocketOptionLevel","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"SocketOptionLevel","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipelineError":{"abstract":[{"code":"Error","type":"codeVoice"},{"text":" that is used by the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" to inform the user of an error.","type":"text"}],"title":"ChannelPipelineError","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelPipelineError","kind":"identifier"}],"kind":"symbol","type":"topic","url":"\/documentation\/niocore\/channelpipelineerror","navigatorTitle":[{"text":"ChannelPipelineError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopIterator":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","type":"topic","url":"\/documentation\/niocore\/eventloopiterator","abstract":[{"type":"text","text":"An iterator over the "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s forming an "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"."}],"role":"symbol","title":"EventLoopIterator","navigatorTitle":[{"text":"EventLoopIterator","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopIterator","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOError":{"kind":"symbol","abstract":[{"text":"An ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" for an IO operation.","type":"text"}],"title":"IOError","url":"\/documentation\/niocore\/ioerror","role":"symbol","type":"topic","navigatorTitle":[{"text":"IOError","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IOError","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotSupportedError":{"url":"\/documentation\/niocore\/niomulticastnotsupportederror","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOMulticastNotSupportedError"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","title":"NIOMulticastNotSupportedError","kind":"symbol","abstract":[{"type":"text","text":"Multicast is not supported on this interface."}],"navigatorTitle":[{"kind":"identifier","text":"NIOMulticastNotSupportedError"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"abstract":[{"type":"codeVoice","code":"NIOSingleStepByteToMessageProcessor"},{"type":"text","text":" uses a "},{"type":"codeVoice","code":"NIOSingleStepByteToMessageDecoder"},{"type":"text","text":" to produce messages"},{"type":"text","text":" "},{"type":"text","text":"from a stream of incoming bytes. It works like "},{"type":"codeVoice","code":"ByteToMessageHandler"},{"type":"text","text":" but may be used outside of the channel pipeline. This allows"},{"type":"text","text":" "},{"type":"text","text":"processing of wrapped protocols in a general way."}],"url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageProcessor"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","title":"NIOSingleStepByteToMessageProcessor"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AutoReadOption":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoReadOption","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/niocore\/autoreadoption","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","title":"AutoReadOption","role":"symbol","type":"topic","navigatorTitle":[{"text":"AutoReadOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"url":"\/documentation\/niocore\/eventloop","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":"s until it’s closed.","type":"text"}],"navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"kind":"symbol","title":"ByteBuffer","abstract":[{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","url":"\/documentation\/niocore\/bytebuffer","navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"type":"topic","title":"NIOSingleStepByteToMessageDecoder","url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","navigatorTitle":[{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}],"kind":"symbol","role":"symbol","abstract":[{"text":"A simplified version of ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" that can generate zero or one messages for each invocation of ","type":"text"},{"code":"decode","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Having ","type":"text"},{"code":"decode","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access"},{"type":"text","text":" "},{"type":"text","text":"to the "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" when returning. This allows for greatly simplified processing."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSingleStepByteToMessageDecoder"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllowRemoteHalfClosureOption":{"abstract":[],"deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"AllowRemoteHalfClosureOption"}],"url":"\/documentation\/niocore\/allowremotehalfclosureoption","kind":"symbol","role":"symbol","title":"AllowRemoteHalfClosureOption","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"AllowRemoteHalfClosureOption"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Endianness":{"abstract":[{"text":"Endianness refers to the sequential order in which bytes are arranged into larger numerical values when stored in","type":"text"},{"text":" ","type":"text"},{"text":"memory or when transmitted over digital links.","type":"text"}],"title":"Endianness","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Endianness","kind":"identifier"}],"type":"topic","url":"\/documentation\/niocore\/endianness","role":"symbol","navigatorTitle":[{"text":"Endianness","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"title":"IdleStateHandler","navigatorTitle":[{"text":"IdleStateHandler","kind":"identifier"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","abstract":[{"text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while.","type":"text"}],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdleStateHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/idlestatehandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInvoker":{"abstract":[{"type":"text","text":"A protocol that signals that outbound and inbound events are triggered by this invoker."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelInvoker"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","title":"ChannelInvoker","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInvoker"}],"type":"topic","url":"\/documentation\/niocore\/channelinvoker"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MulticastChannel":{"abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"MulticastChannel"},{"type":"text","text":" is a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that supports IP multicast operations: that is, a channel that can join multicast"},{"type":"text","text":" "},{"type":"text","text":"groups."}],"navigatorTitle":[{"kind":"identifier","text":"MulticastChannel"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","url":"\/documentation\/niocore\/multicastchannel","title":"MulticastChannel","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MulticastChannel"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"title":"CircularBuffer","url":"\/documentation\/niocore\/circularbuffer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CircularBuffer","kind":"identifier"}],"abstract":[{"type":"text","text":"An automatically expanding ring buffer implementation backed by a "},{"type":"codeVoice","code":"ContiguousArray"},{"type":"text","text":". Even though this implementation"},{"type":"text","text":" "},{"type":"text","text":"will automatically expand if more elements than "},{"type":"codeVoice","code":"initialCapacity"},{"type":"text","text":" are stored, it’s advantageous to prevent"},{"type":"text","text":" "},{"type":"text","text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","kind":"symbol","type":"topic","navigatorTitle":[{"text":"CircularBuffer","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOEventLoopGroupProvider":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","url":"\/documentation\/niocore\/nioeventloopgroupprovider","abstract":[{"type":"text","text":"This type is intended to be used by libraries which use NIO, and offer their users either the option"},{"type":"text","text":" "},{"type":"text","text":"to "},{"code":".share","type":"codeVoice"},{"type":"text","text":" an existing event loop group or create (and manage) a new one ("},{"code":".createNew","type":"codeVoice"},{"type":"text","text":") and let it be"},{"type":"text","text":" "},{"type":"text","text":"managed by given library and its lifecycle."}],"navigatorTitle":[{"text":"NIOEventLoopGroupProvider","kind":"identifier"}],"role":"symbol","title":"NIOEventLoopGroupProvider","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOEventLoopGroupProvider","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"role":"symbol","title":"NIOClientTCPBootstrapProtocol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTCPBootstrapProtocol"}],"abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrapProtocol"},{"type":"text","text":" is implemented by various underlying transport mechanisms. Typically,"},{"type":"text","text":" "},{"type":"text","text":"this will be the BSD Sockets API implemented by "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":"."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOClientTCPBootstrapProtocol"}],"url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTLSProvider":{"type":"topic","role":"symbol","navigatorTitle":[{"text":"NIOClientTLSProvider","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTLSProvider","kind":"identifier"}],"title":"NIOClientTLSProvider","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","url":"\/documentation\/niocore\/nioclienttlsprovider","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"navigatorTitle":[{"text":"FileRegion","kind":"identifier"}],"title":"FileRegion","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FileRegion","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","url":"\/documentation\/niocore\/fileregion","abstract":[{"type":"text","text":"A "},{"code":"FileRegion","type":"codeVoice"},{"type":"text","text":" represent a readable portion usually created to be sent over the network."}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOption":{"url":"\/documentation\/niocore\/channeloption","kind":"symbol","type":"topic","title":"ChannelOption","navigatorTitle":[{"kind":"identifier","text":"ChannelOption"}],"role":"symbol","abstract":[{"text":"A configuration option that can be set on a ","type":"text"},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" to configure different behaviour."}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOption"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MaxMessagesPerReadOption":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MaxMessagesPerReadOption","kind":"identifier"}],"kind":"symbol","abstract":[],"url":"\/documentation\/niocore\/maxmessagesperreadoption","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","title":"MaxMessagesPerReadOption","role":"symbol","type":"topic","navigatorTitle":[{"text":"MaxMessagesPerReadOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DecodingState":{"url":"\/documentation\/niocore\/decodingstate","title":"DecodingState","type":"topic","navigatorTitle":[{"text":"DecodingState","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"State of the current decoding process."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DecodingState","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelShouldQuiesceEvent":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" user event that is sent when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" has been asked to quiesce."}],"url":"\/documentation\/niocore\/channelshouldquiesceevent","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","title":"ChannelShouldQuiesceEvent","role":"symbol","type":"topic","navigatorTitle":[{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPreconcurrencySendable":{"kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOPreconcurrencySendable"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPreconcurrencySendable","role":"symbol","title":"NIOPreconcurrencySendable","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"NIOPreconcurrencySendable"}],"type":"topic","url":"\/documentation\/niocore\/niopreconcurrencysendable"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundInvoker":{"url":"\/documentation\/niocore\/channelinboundinvoker","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelInboundInvoker","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Fire inbound events related to a "},{"type":"codeVoice","code":"Channel"},{"text":" through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" until its end is reached or it’s consumed by a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ChannelInboundInvoker","kind":"identifier"}],"title":"ChannelInboundInvoker"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileDescriptor":{"type":"topic","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileDescriptor"}],"title":"FileDescriptor","url":"\/documentation\/niocore\/filedescriptor","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","navigatorTitle":[{"kind":"identifier","text":"FileDescriptor"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMarkOption":{"abstract":[],"kind":"symbol","type":"topic","title":"WriteBufferWaterMarkOption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WriteBufferWaterMarkOption","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"WriteBufferWaterMarkOption","kind":"identifier"}],"url":"\/documentation\/niocore\/writebufferwatermarkoption","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteHandler":{"kind":"symbol","url":"\/documentation\/niocore\/messagetobytehandler","title":"MessageToByteHandler","type":"topic","navigatorTitle":[{"kind":"identifier","text":"MessageToByteHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","role":"symbol","abstract":[{"text":"A handler which turns a given ","type":"text"},{"type":"codeVoice","code":"MessageToByteEncoder"},{"text":" into a ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageToByteHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkInterface":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIONetworkInterface","kind":"identifier"}],"role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A representation of a single network interface on a system."}],"navigatorTitle":[{"text":"NIONetworkInterface","kind":"identifier"}],"url":"\/documentation\/niocore\/nionetworkinterface","deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","title":"NIONetworkInterface"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"navigatorTitle":[{"kind":"identifier","text":"AcceptBackoffHandler"}],"title":"AcceptBackoffHandler","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"AcceptBackoffHandler"}],"url":"\/documentation\/niocore\/acceptbackoffhandler","role":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that implements a backoff for a ","type":"text"},{"code":"ServerChannel","type":"codeVoice"},{"text":" when accept produces an ","type":"text"},{"code":"IOError","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These errors are often recoverable by reducing the rate at which we call accept."}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelPipeline","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","url":"\/documentation\/niocore\/channelpipeline","navigatorTitle":[{"text":"ChannelPipeline","kind":"identifier"}],"title":"ChannelPipeline","kind":"symbol","type":"topic","abstract":[{"text":"A list of ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s that handle or intercept inbound events and outbound operations of a"},{"type":"text","text":" "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":". "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" implements an advanced form of the Intercepting Filter pattern"},{"type":"text","text":" "},{"type":"text","text":"to give a user full control over how an event is handled and how the "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s in a pipeline"},{"type":"text","text":" "},{"text":"interact with each other.","type":"text"}],"role":"symbol"}}}