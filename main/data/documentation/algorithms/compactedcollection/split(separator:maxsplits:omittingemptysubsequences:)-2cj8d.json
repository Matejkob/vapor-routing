{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-2cj8d","interfaceLanguage":"swift"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/compactedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-2cj8d"]}],"metadata":{"modules":[{"name":"Algorithms"}],"roleHeading":"Instance Method","symbolKind":"method","extendedModule":"Swift","title":"split(separator:maxSplits:omittingEmptySubsequences:)","role":"symbol","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSlRzSQ7ElementSTRpzSl8ElementsABRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC15SplitCollectionVyAGGAE_SiSbtF::SYNTHESIZED::s:10Algorithms19CompactedCollectionV","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Elements","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms15SplitCollectionV","text":"SplitCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}]},"abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedCollection\/LazySequenceProtocol-Implementations"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","sections":[],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" = true) -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The element that should be split upon."}],"type":"paragraph"}],"name":"separator"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original collection containing the remaining elements."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}]}],"name":"maxSplits"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each consecutive pair of "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" "},{"type":"text","text":"elements in the collection and for each instance of "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" at"},{"type":"text","text":" "},{"type":"text","text":"the start or end of the collection. If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", only nonempty"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}],"name":"omittingEmptySubsequences"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A lazy collection of subsequences split from this collection’s"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"The resulting lazy collection consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the collection are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"collection).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a string at each","type":"text"},{"text":" ","type":"text"},{"text":"space character (” “). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each word that","type":"text"},{"text":" ","type":"text"},{"text":"was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","for spaceless in line.lazy.split(separator: \" \") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"inlineContent":[{"type":"text","text":"The second example passes "},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for spaceless in line.lazy.split(separator: \" \", maxSplits: 1) {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I don't want realism. I want magic!"]},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"text":" ","type":"text"},{"text":"were repeated.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for spaceless in line.lazy.split(","  separator: \" \",","  omittingEmptySubsequences: false",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/","\/\/","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the collection."}],"type":"paragraph"}],"type":"aside","name":"Complexity"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitCollection":{"abstract":[{"type":"text","text":"A collection that lazily splits a base collection into subsequences"},{"type":"text","text":" "},{"type":"text","text":"separated by elements that satisfy the given "},{"code":"whereSeparator","type":"codeVoice"},{"text":" predicate.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SplitCollection"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","kind":"symbol","url":"\/documentation\/algorithms\/splitcollection","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitCollection"}],"title":"SplitCollection"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CompactedCollection":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedCollection","kind":"symbol","url":"\/documentation\/algorithms\/compactedcollection","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompactedCollection"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CompactedCollection"}],"abstract":[{"text":"A ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":" that iterates over every non-nil element from the original","type":"text"},{"text":" ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}],"title":"CompactedCollection"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CompactedCollection/split(separator:maxSplits:omittingEmptySubsequences:)-2cj8d":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-2cj8d","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":", "},{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms15SplitCollectionV","text":"SplitCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"url":"\/documentation\/algorithms\/compactedcollection\/split(separator:maxsplits:omittingemptysubsequences:)-2cj8d","role":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CompactedCollection/LazySequenceProtocol-Implementations":{"url":"\/documentation\/algorithms\/compactedcollection\/lazysequenceprotocol-implementations","type":"topic","title":"LazySequenceProtocol Implementations","abstract":[],"kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedCollection\/LazySequenceProtocol-Implementations","role":"collectionGroup"}}}