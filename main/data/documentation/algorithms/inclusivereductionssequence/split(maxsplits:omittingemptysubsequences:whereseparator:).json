{"metadata":{"roleHeading":"Instance Method","externalID":"s:s20LazySequenceProtocolP10AlgorithmsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorAC05SplitB0Vy8ElementsQzGSi_S2b7ElementQzctF::SYNTHESIZED::s:10Algorithms27InclusiveReductionsSequenceV","modules":[{"name":"Algorithms"}],"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"symbolKind":"method","role":"symbol","extendedModule":"Swift"},"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/LazySequenceProtocol-Implementations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":" = true, ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"isSeparator","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SplitSequence","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"name":"maxSplits","content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to split the sequence, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original sequence containing the remaining elements."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}],"type":"paragraph"}]},{"name":"omittingEmptySubsequences","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"type":"text","text":" "},{"type":"text","text":"satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" predicate and for each element at the"},{"type":"text","text":" "},{"type":"text","text":"start or end of the sequence satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" "},{"type":"text","text":"predicate. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}]},{"name":"whereSeparator","content":[{"inlineContent":[{"type":"text","text":"A closure that takes an element as an argument and"},{"type":"text","text":" "},{"type":"text","text":"returns a Boolean value indicating whether the sequence should be"},{"type":"text","text":" "},{"type":"text","text":"split at that element."}],"type":"paragraph"}]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A lazy sequence of subsequences, split from this sequence’s"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"The resulting lazy sequence consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the sequence are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"sequence).","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when lazily splitting a sequence of"},{"type":"text","text":" "},{"type":"text","text":"integers using a closure that matches numbers evenly divisible by 3 or 5."},{"type":"text","text":" "},{"type":"text","text":"The first use of "},{"type":"codeVoice","code":"split"},{"type":"text","text":" returns each subsequence that was originally"},{"type":"text","text":" "},{"type":"text","text":"separated by one or more such numbers."}]},{"syntax":null,"type":"codeListing","code":["let numbers = stride(from: 1, through: 16, by: 1)","for subsequence in numbers.lazy.split(","  whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[4]","[7, 8]","[11]","[13, 14]","[16]","*\/"]},{"type":"paragraph","inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence is split just once, into two subsequences.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["for subsequence in numbers.lazy.split(","  maxSplits: 1,","  whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]","*\/"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the sequence of returned subsequences contains empty"},{"type":"text","text":" "},{"type":"text","text":"subsequences where numbers evenly divisible by 3 or 5 were repeated."}]},{"syntax":null,"type":"codeListing","code":["for subsequence in numbers.lazy.split(","    omittingEmptySubsequences: false,","    whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[4]","[]","[7, 8]","[]","[11]","[13, 14]","[16]","*\/"]},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}],"type":"paragraph"}],"name":"Complexity"}]}],"variants":[{"paths":["\/documentation\/algorithms\/inclusivereductionssequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, that don’t contain elements satisfying the given predicate."}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","url":"\/documentation\/algorithms\/inclusivereductionssequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, that don’t contain elements satisfying the given predicate."}],"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence/LazySequenceProtocol-Implementations":{"url":"\/documentation\/algorithms\/inclusivereductionssequence\/lazysequenceprotocol-implementations","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/LazySequenceProtocol-Implementations","kind":"article","title":"LazySequenceProtocol Implementations","abstract":[],"role":"collectionGroup"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InclusiveReductionsSequence","kind":"identifier"}],"abstract":[],"title":"InclusiveReductionsSequence","role":"symbol","navigatorTitle":[{"text":"InclusiveReductionsSequence","kind":"identifier"}],"url":"\/documentation\/algorithms\/inclusivereductionssequence"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"url":"\/documentation\/algorithms\/splitsequence","title":"SplitSequence","abstract":[{"text":"A sequence that lazily splits a base sequence into subsequences separated by","type":"text"},{"text":" ","type":"text"},{"text":"elements that satisfy the given ","type":"text"},{"type":"codeVoice","code":"whereSeparator"},{"text":" predicate.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitSequence"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SplitSequence"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"}}}