{"variants":[{"paths":["\/documentation\/algorithms\/inclusivereductionssequence\/combinations(ofcount:)-3rxjz"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combinations"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"ofCount"},{"kind":"text","text":" "},{"kind":"internalParam","text":"kRange"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence","kind":"typeIdentifier","text":"CombinationsSequence","preciseIdentifier":"s:10Algorithms20CombinationsSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","text":"RangeExpression","preciseIdentifier":"s:SX"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"}]}]},{"kind":"parameters","parameters":[{"name":"kRange","content":[{"inlineContent":[{"type":"text","text":"The range of numbers of elements to include in each"},{"type":"text","text":" "},{"type":"text","text":"combination."}],"type":"paragraph"}]}]},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example prints the different combinations of 1 and 2 from an array of"},{"type":"text","text":" "},{"type":"text","text":"four colors:"}]},{"syntax":null,"type":"codeListing","code":["let colors = [\"fuchsia\", \"cyan\", \"mauve\", \"magenta\"]","for combo in colors.combinations(ofCount: 1...2) {","    print(combo.joined(separator: \", \"))","}","\/\/ fuchsia","\/\/ cyan","\/\/ mauve","\/\/ magenta","\/\/ fuchsia, cyan","\/\/ fuchsia, mauve","\/\/ fuchsia, magenta","\/\/ cyan, mauve","\/\/ cyan, magenta","\/\/ mauve, magenta"]},{"type":"paragraph","inlineContent":[{"text":"The returned collection presents combinations in a consistent order, where","type":"text"},{"text":" ","type":"text"},{"text":"the indices in each combination are in ascending lexicographical order.","type":"text"},{"text":" ","type":"text"},{"text":"That is, in the example above, the combinations in order are the elements","type":"text"},{"text":" ","type":"text"},{"text":"at ","type":"text"},{"code":"[0]","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[1]","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[2]","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[3]","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[0, 1]","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[0, 2]","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[0, 3]","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[1, 2]","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"code":"[1, 3]","type":"codeVoice"},{"text":", and finally ","type":"text"},{"code":"[2, 3]","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This example prints ","type":"text"},{"inlineContent":[{"text":"all","type":"text"}],"type":"emphasis"},{"text":" the combinations (including an empty array and","type":"text"},{"text":" ","type":"text"},{"text":"the original collection) from an array of numbers:","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let numbers = [10, 20, 30, 40]","for combo in numbers.combinations(ofCount: 0...) {","    print(combo)","}","\/\/ []","\/\/ [10]","\/\/ [20]","\/\/ [30]","\/\/ [40]","\/\/ [10, 20]","\/\/ [10, 30]","\/\/ [10, 40]","\/\/ [20, 30]","\/\/ [20, 40]","\/\/ [30, 40]","\/\/ [10, 20, 30]","\/\/ [10, 20, 40]","\/\/ [10, 30, 40]","\/\/ [20, 30, 40]","\/\/ [10, 20, 30, 40]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"kRange"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0...0"},{"type":"text","text":", the resulting sequence has exactly one element, an"},{"type":"text","text":" "},{"type":"text","text":"empty array. The given range is limited to "},{"type":"codeVoice","code":"0...base.count"},{"type":"text","text":". If the"},{"type":"text","text":" "},{"type":"text","text":"limited range is empty, the resulting sequence has no elements."}]},{"name":"Complexity","type":"aside","content":[{"inlineContent":[{"text":"O(1) for random-access base collections. O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":") where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" ","type":"text"},{"text":"is the number of elements in the base collection, since","type":"text"},{"text":" ","type":"text"},{"code":"CombinationsSequence","type":"codeVoice"},{"text":" accesses the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" of the base collection.","type":"text"}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/combinations(ofCount:)-3rxjz"},"abstract":[{"text":"Returns a collection of combinations of this collection’s elements, with","type":"text"},{"text":" ","type":"text"},{"text":"each combination having the specified number of elements.","type":"text"}],"kind":"symbol","sections":[],"metadata":{"roleHeading":"Instance Method","modules":[{"name":"Algorithms"}],"extendedModule":"Swift","role":"symbol","title":"combinations(ofCount:)","externalID":"s:Sl10AlgorithmsE12combinations7ofCountAA20CombinationsSequenceVyxGqd___tSXRd__Si5BoundRtd__lF::SYNTHESIZED::s:10Algorithms27InclusiveReductionsSequenceV","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combinations"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"ofCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CombinationsSequence","preciseIdentifier":"s:10Algorithms20CombinationsSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/Collection-Implementations"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence","type":"topic","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InclusiveReductionsSequence","kind":"identifier"}],"abstract":[],"title":"InclusiveReductionsSequence","role":"symbol","navigatorTitle":[{"text":"InclusiveReductionsSequence","kind":"identifier"}],"url":"\/documentation\/algorithms\/inclusivereductionssequence"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CombinationsSequence":{"abstract":[{"type":"text","text":"A collection wrapper that generates combinations of a base collection."}],"title":"CombinationsSequence","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CombinationsSequence"}],"type":"topic","url":"\/documentation\/algorithms\/combinationssequence","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CombinationsSequence"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence/Collection-Implementations":{"title":"Collection Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/Collection-Implementations","url":"\/documentation\/algorithms\/inclusivereductionssequence\/collection-implementations","abstract":[],"kind":"article","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence/combinations(ofCount:)-3rxjz":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/combinations(ofCount:)-3rxjz","url":"\/documentation\/algorithms\/inclusivereductionssequence\/combinations(ofcount:)-3rxjz","abstract":[{"text":"Returns a collection of combinations of this collection’s elements, with","type":"text"},{"text":" ","type":"text"},{"text":"each combination having the specified number of elements.","type":"text"}],"kind":"symbol","role":"symbol","title":"combinations(ofCount:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combinations","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ofCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms20CombinationsSequenceV","text":"CombinationsSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}]}}}