{"variants":[{"paths":["\/documentation\/algorithms\/chain2sequence\/minandmax()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"minAndMax","kind":"identifier"},{"text":"() -> (min","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", max","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")?","kind":"text"}],"platforms":["Linux"]}]},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"inlineContent":[{"type":"text","text":"A tuple with the sequenceâ€™s minimum element, followed by its"},{"type":"text","text":" "},{"type":"text","text":"maximum element. If the sequence provides multiple qualifying minimum"},{"type":"text","text":" "},{"type":"text","text":"elements, the first equivalent element is returned; of multiple maximum"},{"type":"text","text":" "},{"type":"text","text":"elements, the last is returned. If the sequence has no elements, the"},{"type":"text","text":" "},{"type":"text","text":"method returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example finds the smallest and largest values in an array of height"},{"type":"text","text":" "},{"type":"text","text":"measurements."}]},{"code":["let heights = [67.5, 65.7, 64.3, 61.1, 58.5, 60.3, 64.9]","if let (lowestHeight, greatestHeight) = heights.minAndMax() {","    print(lowestHeight, greatestHeight)","} else {","    print(\"The list of heights is empty\")","}","\/\/ Prints: \"58.5 67.5\""],"type":"codeListing","syntax":null},{"type":"aside","name":"Precondition","content":[{"type":"paragraph","inlineContent":[{"text":"The sequence is finite.","type":"text"}]}],"style":"note"},{"type":"aside","name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}]}],"style":"note"}],"kind":"content"}],"metadata":{"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"roleHeading":"Instance Method","title":"minAndMax()","externalID":"s:ST10AlgorithmsSL7ElementRpzrlE9minAndMaxAC0C0_AC3maxtSgyF::SYNTHESIZED::s:10Algorithms14Chain2SequenceV","extendedModule":"Swift","modules":[{"name":"Algorithms"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"minAndMax"},{"kind":"text","text":"() -> (min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":")?"}]},"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/minAndMax()","interfaceLanguage":"swift"},"abstract":[{"text":"Returns both the minimum and maximum elements in the sequence.","type":"text"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/Sequence-Implementations"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Chain2Sequence/Sequence-Implementations":{"abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/Sequence-Implementations","type":"topic","role":"collectionGroup","title":"Sequence Implementations","kind":"article","url":"\/documentation\/algorithms\/chain2sequence\/sequence-implementations"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Chain2Sequence/minAndMax()":{"title":"minAndMax()","conformance":{"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence\/minAndMax()","abstract":[{"type":"text","text":"Returns both the minimum and maximum elements in the sequence."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"minAndMax","kind":"identifier"},{"text":"() -> (min","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", max","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")?","kind":"text"}],"role":"symbol","url":"\/documentation\/algorithms\/chain2sequence\/minandmax()","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Chain2Sequence":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Chain2Sequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Chain2Sequence","kind":"symbol","title":"Chain2Sequence","navigatorTitle":[{"text":"Chain2Sequence","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/algorithms\/chain2sequence","abstract":[{"text":"A concatenation of two sequences with the same element type.","type":"text"}]}}}