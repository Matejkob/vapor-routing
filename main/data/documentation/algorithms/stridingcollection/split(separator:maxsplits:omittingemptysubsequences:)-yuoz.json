{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/StridingCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-yuoz"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" = true) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","text":"SplitCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"The element that should be split upon.","type":"text"}],"type":"paragraph"}],"name":"separator"},{"content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original collection containing the remaining elements."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"maxSplits"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each consecutive pair of "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" "},{"type":"text","text":"elements in the collection and for each instance of "},{"type":"codeVoice","code":"separator"},{"type":"text","text":" at"},{"type":"text","text":" "},{"type":"text","text":"the start or end of the collection. If "},{"type":"codeVoice","code":"true"},{"type":"text","text":", only nonempty"},{"type":"text","text":" "},{"type":"text","text":"subsequences are returned. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}],"name":"omittingEmptySubsequences"}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"inlineContent":[{"text":"A lazy collection of subsequences split from this collection’s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"inlineContent":[{"type":"text","text":"The resulting lazy collection consists of at most "},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"subsequences. Elements that are used to split the collection are not"},{"type":"text","text":" "},{"type":"text","text":"returned as part of any subsequence (except possibly the last one, in the"},{"type":"text","text":" "},{"type":"text","text":"case where "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" is less than the number of separators in the"},{"type":"text","text":" "},{"type":"text","text":"collection)."}],"type":"paragraph"},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a string at each","type":"text"},{"text":" ","type":"text"},{"text":"space character (” “). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each word that","type":"text"},{"text":" ","type":"text"},{"text":"was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","for spaceless in line.lazy.split(separator: \" \") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original string is split just once, into two new strings."}],"type":"paragraph"},{"code":["for spaceless in line.lazy.split(separator: \" \", maxSplits: 1) {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I don't want realism. I want magic!"],"type":"codeListing","syntax":null},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"text":" ","type":"text"},{"text":"were repeated.","type":"text"}],"type":"paragraph"},{"code":["for spaceless in line.lazy.split(","  separator: \" \",","  omittingEmptySubsequences: false",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/","\/\/","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"],"type":"codeListing","syntax":null},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}]}],"name":"Complexity"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"kind":"symbol","metadata":{"roleHeading":"Instance Method","extendedModule":"Swift","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:10Algorithms15SplitCollectionV","kind":"typeIdentifier","text":"SplitCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"Elements","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":".","type":"text"}]},"modules":[{"name":"Algorithms"}],"symbolKind":"method","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSlRzSQ7ElementSTRpzSl8ElementsABRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC15SplitCollectionVyAGGAE_SiSbtF::SYNTHESIZED::s:10Algorithms18StridingCollectionV"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/StridingCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/StridingCollection\/LazySequenceProtocol-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/stridingcollection\/split(separator:maxsplits:omittingemptysubsequences:)-yuoz"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/StridingCollection":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StridingCollection"}],"title":"StridingCollection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/StridingCollection","url":"\/documentation\/algorithms\/stridingcollection","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A wrapper that strides over a base collection."}],"navigatorTitle":[{"kind":"identifier","text":"StridingCollection"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/StridingCollection/LazySequenceProtocol-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/StridingCollection\/LazySequenceProtocol-Implementations","abstract":[],"url":"\/documentation\/algorithms\/stridingcollection\/lazysequenceprotocol-implementations","role":"collectionGroup","type":"topic","title":"LazySequenceProtocol Implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/StridingCollection/split(separator:maxSplits:omittingEmptySubsequences:)-yuoz":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"url":"\/documentation\/algorithms\/stridingcollection\/split(separator:maxsplits:omittingemptysubsequences:)-yuoz","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Elements"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Collection"},{"text":".","type":"text"}]},"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/StridingCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-yuoz","role":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitCollection":{"abstract":[{"type":"text","text":"A collection that lazily splits a base collection into subsequences"},{"type":"text","text":" "},{"type":"text","text":"separated by elements that satisfy the given "},{"code":"whereSeparator","type":"codeVoice"},{"text":" predicate.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SplitCollection"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","kind":"symbol","url":"\/documentation\/algorithms\/splitcollection","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitCollection"}],"title":"SplitCollection"}}}