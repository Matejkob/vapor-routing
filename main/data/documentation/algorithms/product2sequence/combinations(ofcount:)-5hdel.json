{"metadata":{"title":"combinations(ofCount:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combinations"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"ofCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"CombinationsSequence","preciseIdentifier":"s:10Algorithms20CombinationsSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"role":"symbol","extendedModule":"Swift","externalID":"s:Sl10AlgorithmsE12combinations7ofCountAA20CombinationsSequenceVyxGqd___tSXRd__Si5BoundRtd__lF::SYNTHESIZED::s:10Algorithms16Product2SequenceV","roleHeading":"Instance Method","symbolKind":"method","modules":[{"name":"Algorithms"}]},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/product2sequence\/combinations(ofcount:)-5hdel"]}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Product2Sequence\/combinations(ofCount:)-5hdel","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Product2Sequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Product2Sequence\/Collection-Implementations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combinations","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ofCount","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"kRange","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"CombinationsSequence","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence","preciseIdentifier":"s:10Algorithms20CombinationsSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"RangeExpression","preciseIdentifier":"s:SX","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The range of numbers of elements to include in each"},{"type":"text","text":" "},{"type":"text","text":"combination."}]}],"name":"kRange"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"This example prints the different combinations of 1 and 2 from an array of","type":"text"},{"text":" ","type":"text"},{"text":"four colors:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let colors = [\"fuchsia\", \"cyan\", \"mauve\", \"magenta\"]","for combo in colors.combinations(ofCount: 1...2) {","    print(combo.joined(separator: \", \"))","}","\/\/ fuchsia","\/\/ cyan","\/\/ mauve","\/\/ magenta","\/\/ fuchsia, cyan","\/\/ fuchsia, mauve","\/\/ fuchsia, magenta","\/\/ cyan, mauve","\/\/ cyan, magenta","\/\/ mauve, magenta"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The returned collection presents combinations in a consistent order, where"},{"type":"text","text":" "},{"type":"text","text":"the indices in each combination are in ascending lexicographical order."},{"type":"text","text":" "},{"type":"text","text":"That is, in the example above, the combinations in order are the elements"},{"type":"text","text":" "},{"type":"text","text":"at "},{"type":"codeVoice","code":"[0]"},{"type":"text","text":", "},{"type":"codeVoice","code":"[1]"},{"type":"text","text":", "},{"type":"codeVoice","code":"[2]"},{"type":"text","text":", "},{"type":"codeVoice","code":"[3]"},{"type":"text","text":", "},{"type":"codeVoice","code":"[0, 1]"},{"type":"text","text":", "},{"type":"codeVoice","code":"[0, 2]"},{"type":"text","text":", "},{"type":"codeVoice","code":"[0, 3]"},{"type":"text","text":", "},{"type":"codeVoice","code":"[1, 2]"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"[1, 3]"},{"type":"text","text":", and finally "},{"type":"codeVoice","code":"[2, 3]"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example prints "},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"type":"text","text":" the combinations (including an empty array and"},{"type":"text","text":" "},{"type":"text","text":"the original collection) from an array of numbers:"}],"type":"paragraph"},{"syntax":null,"code":["let numbers = [10, 20, 30, 40]","for combo in numbers.combinations(ofCount: 0...) {","    print(combo)","}","\/\/ []","\/\/ [10]","\/\/ [20]","\/\/ [30]","\/\/ [40]","\/\/ [10, 20]","\/\/ [10, 30]","\/\/ [10, 40]","\/\/ [20, 30]","\/\/ [20, 40]","\/\/ [30, 40]","\/\/ [10, 20, 30]","\/\/ [10, 20, 40]","\/\/ [10, 30, 40]","\/\/ [20, 30, 40]","\/\/ [10, 20, 30, 40]"],"type":"codeListing"},{"inlineContent":[{"text":"If ","type":"text"},{"code":"kRange","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0...0","type":"codeVoice"},{"text":", the resulting sequence has exactly one element, an","type":"text"},{"text":" ","type":"text"},{"text":"empty array. The given range is limited to ","type":"text"},{"code":"0...base.count","type":"codeVoice"},{"text":". If the","type":"text"},{"text":" ","type":"text"},{"text":"limited range is empty, the resulting sequence has no elements.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Complexity","content":[{"inlineContent":[{"text":"O(1) for random-access base collections. O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":") where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" ","type":"text"},{"text":"is the number of elements in the base collection, since","type":"text"},{"text":" ","type":"text"},{"code":"CombinationsSequence","type":"codeVoice"},{"text":" accesses the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" of the base collection.","type":"text"}],"type":"paragraph"}],"type":"aside"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Returns a collection of combinations of this collection’s elements, with","type":"text"},{"text":" ","type":"text"},{"text":"each combination having the specified number of elements.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Product2Sequence/Collection-Implementations":{"abstract":[],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Product2Sequence\/Collection-Implementations","title":"Collection Implementations","role":"collectionGroup","url":"\/documentation\/algorithms\/product2sequence\/collection-implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Product2Sequence/combinations(ofCount:)-5hdel":{"url":"\/documentation\/algorithms\/product2sequence\/combinations(ofcount:)-5hdel","abstract":[{"text":"Returns a collection of combinations of this collection’s elements, with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each combination having the specified number of elements."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Product2Sequence\/combinations(ofCount:)-5hdel","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combinations"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"ofCount"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms20CombinationsSequenceV","text":"CombinationsSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","title":"combinations(ofCount:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CombinationsSequence":{"abstract":[{"type":"text","text":"A collection wrapper that generates combinations of a base collection."}],"title":"CombinationsSequence","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CombinationsSequence","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CombinationsSequence"}],"type":"topic","url":"\/documentation\/algorithms\/combinationssequence","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"CombinationsSequence"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/Product2Sequence":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Product2Sequence"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/Product2Sequence","role":"symbol","title":"Product2Sequence","url":"\/documentation\/algorithms\/product2sequence","type":"topic","abstract":[{"text":"A sequence that represents the product of two sequences’ elements.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Product2Sequence"}],"kind":"symbol"}}}