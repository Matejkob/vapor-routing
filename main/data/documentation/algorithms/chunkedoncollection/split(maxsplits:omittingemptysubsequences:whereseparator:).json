{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedOnCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedOnCollection\/LazySequenceProtocol-Implementations"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" = true, ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"isSeparator","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SplitCollection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"kind":"parameters","parameters":[{"name":"maxSplits","content":[{"inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original collection containing the remaining elements."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}],"type":"paragraph"}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each pair of consecutive elements","type":"text"},{"text":" ","type":"text"},{"text":"satisfying the ","type":"text"},{"code":"isSeparator","type":"codeVoice"},{"text":" predicate and for each element at the","type":"text"},{"text":" ","type":"text"},{"text":"start or end of the collection satisfying the ","type":"text"},{"code":"isSeparator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"predicate. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"whereSeparator","content":[{"type":"paragraph","inlineContent":[{"text":"A closure that takes an element as an argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns a Boolean value indicating whether the collection should be","type":"text"},{"text":" ","type":"text"},{"text":"split at that element.","type":"text"}]}]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"text":"A lazy collection of subsequences, split from this collection’s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"The resulting lazy collection consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" "},{"type":"text","text":"subsequences. Elements that are used to split the collection are not"},{"type":"text","text":" "},{"type":"text","text":"returned as part of any subsequence (except possibly the last one, in the"},{"type":"text","text":" "},{"type":"text","text":"case where "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" is less than the number of separators in the"},{"type":"text","text":" "},{"type":"text","text":"collection)."}],"type":"paragraph"},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when lazily splitting a string","type":"text"},{"text":" ","type":"text"},{"text":"using a closure that matches spaces. The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each","type":"text"},{"text":" ","type":"text"},{"text":"word that was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","for spaceless in line.lazy.split(whereSeparator: { $0 == \" \" }) {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["for spaceless in line.lazy.split(","  maxSplits: 1,","  whereSeparator: { $0 == \" \" }",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I don't want realism. I want magic!"]},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the returned array contains empty strings where spaces","type":"text"},{"text":" ","type":"text"},{"text":"were repeated.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["for spaceless in line.lazy.split(","  omittingEmptySubsequences: false,","  whereSeparator: { $0 == \" \" }",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/","\/\/","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"style":"note","type":"aside","content":[{"inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}],"name":"Complexity"}]}],"sections":[],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedOnCollection\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"symbolKind":"method","modules":[{"name":"Algorithms"}],"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Elements"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"roleHeading":"Instance Method","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSlRzSl8ElementsABRpzrlE5split9maxSplits25omittingEmptySubsequences14whereSeparatorAC15SplitCollectionVyAEGSi_S2b7ElementSTQzctF::SYNTHESIZED::s:10Algorithms19ChunkedOnCollectionV","extendedModule":"Swift","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/chunkedoncollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the collection, in"},{"type":"text","text":" "},{"type":"text","text":"order, that don’t contain elements satisfying the given predicate."}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitCollection":{"abstract":[{"type":"text","text":"A collection that lazily splits a base collection into subsequences"},{"type":"text","text":" "},{"type":"text","text":"separated by elements that satisfy the given "},{"code":"whereSeparator","type":"codeVoice"},{"text":" predicate.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"SplitCollection"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","kind":"symbol","url":"\/documentation\/algorithms\/splitcollection","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitCollection"}],"title":"SplitCollection"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedOnCollection/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"url":"\/documentation\/algorithms\/chunkedoncollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Elements"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, that don’t contain elements satisfying the given predicate.","type":"text"}],"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedOnCollection\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedOnCollection/LazySequenceProtocol-Implementations":{"abstract":[],"title":"LazySequenceProtocol Implementations","type":"topic","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedOnCollection\/LazySequenceProtocol-Implementations","kind":"article","url":"\/documentation\/algorithms\/chunkedoncollection\/lazysequenceprotocol-implementations"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedOnCollection":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChunkedOnCollection"}],"kind":"symbol","abstract":[{"type":"text","text":"A collection wrapper that breaks a collection into chunks based on a"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"title":"ChunkedOnCollection","navigatorTitle":[{"kind":"identifier","text":"ChunkedOnCollection"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedOnCollection","url":"\/documentation\/algorithms\/chunkedoncollection","role":"symbol"}}}