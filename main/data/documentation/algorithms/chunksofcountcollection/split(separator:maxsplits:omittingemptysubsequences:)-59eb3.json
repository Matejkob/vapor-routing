{"abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/LazySequenceProtocol-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/chunksofcountcollection\/split(separator:maxsplits:omittingemptysubsequences:)-59eb3"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-59eb3"},"sections":[],"kind":"symbol","metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","symbolKind":"method","title":"split(separator:maxSplits:omittingEmptySubsequences:)","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms23ChunksOfCountCollectionV","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"extendedModule":"Swift","role":"symbol","modules":[{"name":"Algorithms"}]},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":" = true) -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV","kind":"typeIdentifier","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"separator","content":[{"type":"paragraph","inlineContent":[{"text":"The element that should be split upon.","type":"text"}]}]},{"name":"maxSplits","content":[{"inlineContent":[{"text":"The maximum number of times to split the sequence, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original sequence containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"elements in the sequence and for each instance of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"text":"the start or end of the sequence. If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", only nonempty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences are returned. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"text":"A lazy sequence of subsequences, split from this sequenceâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The resulting lazy sequence consists of at most "},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"subsequences. Elements that are used to split the sequence are not"},{"type":"text","text":" "},{"type":"text","text":"returned as part of any subsequence (except possibly the last one, in the"},{"type":"text","text":" "},{"type":"text","text":"case where "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" is less than the number of separators in the"},{"type":"text","text":" "},{"type":"text","text":"sequence)."}],"type":"paragraph"},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"integers at each zero (","type":"text"},{"code":"0","type":"codeVoice"},{"text":"). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each","type":"text"},{"text":" ","type":"text"},{"text":"subsequence that was originally separated by one or more zeros.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])","for subsequence in numbers.lazy.split(separator: 0) {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[5]","*\/"]},{"inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original sequence is split just once, into two subsequences."}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["for subsequence in numbers.lazy.split(","    separator: 0,","    maxSplits: 1",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4, 0, 0, 5]","*\/"]},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the sequence of returned subsequences contains empty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences where zeros were repeated.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["for subsequence in numbers.lazy.split(","    separator: 0,","    omittingEmptySubsequences: false",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[]","[5]","*\/"]},{"content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":" is the length of the sequence.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Complexity"}],"kind":"content"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection/split(separator:maxSplits:omittingEmptySubsequences:)-59eb3":{"url":"\/documentation\/algorithms\/chunksofcountcollection\/split(separator:maxsplits:omittingemptysubsequences:)-59eb3","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-59eb3","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","kind":"typeIdentifier","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection/LazySequenceProtocol-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection\/LazySequenceProtocol-Implementations","role":"collectionGroup","type":"topic","url":"\/documentation\/algorithms\/chunksofcountcollection\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"url":"\/documentation\/algorithms\/splitsequence","title":"SplitSequence","abstract":[{"text":"A sequence that lazily splits a base sequence into subsequences separated by","type":"text"},{"text":" ","type":"text"},{"text":"elements that satisfy the given ","type":"text"},{"type":"codeVoice","code":"whereSeparator"},{"text":" predicate.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitSequence"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SplitSequence"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunksOfCountCollection":{"navigatorTitle":[{"kind":"identifier","text":"ChunksOfCountCollection"}],"role":"symbol","url":"\/documentation\/algorithms\/chunksofcountcollection","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChunksOfCountCollection"}],"kind":"symbol","abstract":[{"text":"A collection that presents the elements of its base collection in","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"SubSequence"},{"type":"text","text":" chunks of any given count."}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunksOfCountCollection","title":"ChunksOfCountCollection"}}}