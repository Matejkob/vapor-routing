{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" = true) -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The element that should be split upon."}]}],"name":"separator"},{"content":[{"inlineContent":[{"text":"The maximum number of times to split the sequence, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original sequence containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"maxSplits"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"elements in the sequence and for each instance of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"text":"the start or end of the sequence. If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", only nonempty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences are returned. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"omittingEmptySubsequences"}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A lazy sequence of subsequences, split from this sequenceâ€™s"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}]},{"kind":"content","content":[{"level":2,"text":"Discussion","type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"The resulting lazy sequence consists of at most ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the sequence are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"sequence).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"integers at each zero (","type":"text"},{"code":"0","type":"codeVoice"},{"text":"). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each","type":"text"},{"text":" ","type":"text"},{"text":"subsequence that was originally separated by one or more zeros.","type":"text"}]},{"code":["let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])","for subsequence in numbers.lazy.split(separator: 0) {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[5]","*\/"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence is split just once, into two subsequences.","type":"text"}]},{"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    maxSplits: 1",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4, 0, 0, 5]","*\/"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" ","type":"text"},{"text":"parameter, so the sequence of returned subsequences contains empty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences where zeros were repeated.","type":"text"}]},{"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    omittingEmptySubsequences: false",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[]","[5]","*\/"],"syntax":null,"type":"codeListing"},{"style":"note","type":"aside","name":"Complexity","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}]}]}],"sections":[],"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, around elements equal to the given element."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/cycledtimescollection\/split(separator:maxsplits:omittingemptysubsequences:)-357yu"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-357yu"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/LazySequenceProtocol-Implementations"]]},"metadata":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"extendedModule":"Swift","role":"symbol","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"split(separator:maxSplits:omittingEmptySubsequences:)","roleHeading":"Instance Method","modules":[{"name":"Algorithms"}],"externalID":"s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms21CycledTimesCollectionV"},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","kind":"symbol","url":"\/documentation\/algorithms","type":"topic","role":"collection","abstract":[],"title":"Algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledTimesCollection":{"role":"symbol","title":"CycledTimesCollection","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CycledTimesCollection","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection","kind":"symbol","type":"topic","url":"\/documentation\/algorithms\/cycledtimescollection","abstract":[{"text":"A collection wrapper that repeats the elements of a base collection for a","type":"text"},{"text":" ","type":"text"},{"text":"finite number of times.","type":"text"}],"navigatorTitle":[{"text":"CycledTimesCollection","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledTimesCollection/split(separator:maxSplits:omittingEmptySubsequences:)-357yu":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-357yu","abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, around elements equal to the given element."}],"type":"topic","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","title":"split(separator:maxSplits:omittingEmptySubsequences:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") -> ","kind":"text"},{"text":"SplitSequence","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/algorithms\/cycledtimescollection\/split(separator:maxsplits:omittingemptysubsequences:)-357yu"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"url":"\/documentation\/algorithms\/splitsequence","title":"SplitSequence","abstract":[{"text":"A sequence that lazily splits a base sequence into subsequences separated by","type":"text"},{"text":" ","type":"text"},{"text":"elements that satisfy the given ","type":"text"},{"type":"codeVoice","code":"whereSeparator"},{"text":" predicate.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SplitSequence"}],"type":"topic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SplitSequence"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CycledTimesCollection/LazySequenceProtocol-Implementations":{"title":"LazySequenceProtocol Implementations","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CycledTimesCollection\/LazySequenceProtocol-Implementations","url":"\/documentation\/algorithms\/cycledtimescollection\/lazysequenceprotocol-implementations","kind":"article","role":"collectionGroup","type":"topic"}}}