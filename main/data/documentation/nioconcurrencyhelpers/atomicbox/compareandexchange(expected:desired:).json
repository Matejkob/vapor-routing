{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox"]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox\/compareAndExchange(expected:desired:)"},"metadata":{"role":"symbol","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"externalID":"s:21NIOConcurrencyHelpers9AtomicBoxC18compareAndExchange8expected7desiredSbx_xtF","platforms":[],"roleHeading":"Instance Method","modules":[{"name":"NIOConcurrencyHelpers"}],"title":"compareAndExchange(expected:desired:)"},"kind":"symbol","abstract":[{"type":"text","text":"Atomically compares the value against "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" and, if they are equal,"},{"type":"text","text":" "},{"type":"text","text":"replaces the value with "},{"type":"codeVoice","code":"desired"},{"type":"text","text":"."}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareAndExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]}],"kind":"declarations"},{"parameters":[{"name":"expected","content":[{"type":"paragraph","inlineContent":[{"text":"The value that this object must currently hold for the","type":"text"},{"text":" ","type":"text"},{"text":"compare-and-swap to succeed.","type":"text"}]}]},{"name":"desired","content":[{"inlineContent":[{"type":"text","text":"The new value that this object will hold if the compare"},{"type":"text","text":" "},{"type":"text","text":"succeeds."}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"text":"","type":"text"},{"code":"True","type":"codeVoice"},{"text":" if the exchange occurred, or ","type":"text"},{"code":"False","type":"codeVoice"},{"text":" if ","type":"text"},{"code":"expected","type":"codeVoice"},{"text":" did not","type":"text"},{"text":" ","type":"text"},{"text":"match the current value and so no exchange occurred.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This implementation conforms to C11’s ","type":"text"},{"code":"atomic_compare_exchange_strong","type":"codeVoice"},{"text":". This","type":"text"},{"text":" ","type":"text"},{"text":"means that the compare-and-swap will always succeed if ","type":"text"},{"code":"expected","type":"codeVoice"},{"text":" is equal to","type":"text"},{"text":" ","type":"text"},{"text":"value. Additionally, it uses a ","type":"text"},{"inlineContent":[{"type":"text","text":"sequentially consistent ordering"}],"type":"emphasis"},{"text":". For more","type":"text"},{"text":" ","type":"text"},{"text":"details on atomic memory models, check the documentation for C11’s","type":"text"},{"text":" ","type":"text"},{"code":"stdatomic.h","type":"codeVoice"},{"text":".","type":"text"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The implementation of "},{"type":"codeVoice","code":"exchange"},{"type":"text","text":" contains a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Compare and Exchange loop"}]},{"type":"text","text":", ie. it may busy wait with"},{"type":"text","text":" "},{"type":"text","text":"100% CPU load."}]}],"name":"Warning","type":"aside","style":"warning"}]}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"AtomicBox is deprecated without replacement because the original implementation doesn't work."}],"type":"paragraph"}],"variants":[{"paths":["\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/AtomicBox/compareAndExchange(expected:desired:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareAndExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"role":"symbol","url":"\/documentation\/nioconcurrencyhelpers\/atomicbox\/compareandexchange(expected:desired:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox\/compareAndExchange(expected:desired:)","deprecated":true,"type":"topic","title":"compareAndExchange(expected:desired:)","abstract":[{"text":"Atomically compares the value against ","type":"text"},{"code":"expected","type":"codeVoice"},{"text":" and, if they are equal,","type":"text"},{"text":" ","type":"text"},{"text":"replaces the value with ","type":"text"},{"code":"desired","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers":{"role":"collection","title":"NIOConcurrencyHelpers","type":"topic","kind":"symbol","url":"\/documentation\/nioconcurrencyhelpers","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/AtomicBox":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/AtomicBox","title":"AtomicBox","navigatorTitle":[{"text":"AtomicBox","kind":"identifier"}],"abstract":[{"code":"AtomicBox","type":"codeVoice"},{"text":" is a heap-allocated box which allows lock-free access to an instance of a Swift class.","type":"text"}],"role":"symbol","deprecated":true,"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicBox","kind":"identifier"}],"url":"\/documentation\/nioconcurrencyhelpers\/atomicbox"}}}