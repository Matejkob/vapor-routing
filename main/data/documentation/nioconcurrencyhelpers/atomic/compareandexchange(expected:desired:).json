{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/Atomic"]]},"sections":[],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"please use ManagedAtomic from https:\/\/github.com\/apple\/swift-atomics instead"}],"type":"paragraph"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"compareAndExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The value that this object must currently hold for the"},{"type":"text","text":" "},{"type":"text","text":"compare-and-swap to succeed."}]}],"name":"expected"},{"content":[{"inlineContent":[{"type":"text","text":"The new value that this object will hold if the compare"},{"type":"text","text":" "},{"type":"text","text":"succeeds."}],"type":"paragraph"}],"name":"desired"}],"kind":"parameters"},{"content":[{"text":"Return Value","type":"heading","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":""},{"code":"True","type":"codeVoice"},{"type":"text","text":" if the exchange occurred, or "},{"code":"False","type":"codeVoice"},{"type":"text","text":" if "},{"code":"expected","type":"codeVoice"},{"type":"text","text":" did not"},{"type":"text","text":" "},{"type":"text","text":"match the current value and so no exchange occurred."}]}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This implementation conforms to C11’s "},{"type":"codeVoice","code":"atomic_compare_exchange_strong"},{"type":"text","text":". This"},{"type":"text","text":" "},{"type":"text","text":"means that the compare-and-swap will always succeed if "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" is equal to"},{"type":"text","text":" "},{"type":"text","text":"value. Additionally, it uses a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"sequentially consistent ordering"}]},{"type":"text","text":". For more"},{"type":"text","text":" "},{"type":"text","text":"details on atomic memory models, check the documentation for C11’s"},{"type":"text","text":" "},{"type":"codeVoice","code":"stdatomic.h"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/Atomic\/compareAndExchange(expected:desired:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Atomically compares the value against "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" and, if they are equal,"},{"type":"text","text":" "},{"type":"text","text":"replaces the value with "},{"type":"codeVoice","code":"desired"},{"type":"text","text":"."}],"metadata":{"role":"symbol","externalID":"s:21NIOConcurrencyHelpers6AtomicC18compareAndExchange8expected7desiredSbx_xtF","modules":[{"name":"NIOConcurrencyHelpers"}],"platforms":[],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareAndExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"roleHeading":"Instance Method","symbolKind":"method","title":"compareAndExchange(expected:desired:)"},"variants":[{"paths":["\/documentation\/nioconcurrencyhelpers\/atomic\/compareandexchange(expected:desired:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/Atomic/compareAndExchange(expected:desired:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/Atomic\/compareAndExchange(expected:desired:)","abstract":[{"type":"text","text":"Atomically compares the value against "},{"type":"codeVoice","code":"expected"},{"type":"text","text":" and, if they are equal,"},{"type":"text","text":" "},{"type":"text","text":"replaces the value with "},{"type":"codeVoice","code":"desired"},{"type":"text","text":"."}],"url":"\/documentation\/nioconcurrencyhelpers\/atomic\/compareandexchange(expected:desired:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareAndExchange","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}],"deprecated":true,"role":"symbol","title":"compareAndExchange(expected:desired:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers":{"role":"collection","title":"NIOConcurrencyHelpers","type":"topic","kind":"symbol","url":"\/documentation\/nioconcurrencyhelpers","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers"},"doc://co.pointfree.VaporRouting/documentation/NIOConcurrencyHelpers/Atomic":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOConcurrencyHelpers\/Atomic","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"Atomic"}],"navigatorTitle":[{"kind":"identifier","text":"Atomic"}],"deprecated":true,"abstract":[{"type":"text","text":"An encapsulation of an atomic primitive object."}],"type":"topic","url":"\/documentation\/nioconcurrencyhelpers\/atomic","title":"Atomic"}}}